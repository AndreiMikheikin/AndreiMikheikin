function removeIngredient(e){const t=e.closest(".ingredient-group");t&&t.remove()}function addIngredientField(){const e=document.getElementById("ingredients-container"),t=e.querySelectorAll(".ingredient-group").length,n=document.createElement("div");n.classList.add("ingredient-group"),n.setAttribute("data-index",t),n.innerHTML='\n        <input type="text" name="ingredient-name" placeholder="Название ингредиента" required>\n        <input type="number" name="ingredient-weight" placeholder="Вес" class="weight-input" required>\n        <select name="ingredient-unit">\n            <option value="г">г</option>\n            <option value="мл">мл</option>\n            <option value="шт">шт</option>\n        </select>\n        <input type="text" name="ingredient-supplier" placeholder="Поставщик">\n        <button type="button" class="remove-ingredient-button"><i class="fa fa-trash"></i></button>\n    ',e.appendChild(n)}function addEventListeners(){const e=document.getElementById("add-ingredient"),t=document.getElementById("load-dish-button"),n=document.getElementById("delete-dish-button"),i=document.getElementById("save-dish-button"),a=document.getElementById("shared");e&&e.addEventListener("click",addIngredientField),t&&t.addEventListener("click",loadDishForEditing),n&&n.addEventListener("click",deleteDish),i&&i.addEventListener("click",handleSubmit),a&&a.addEventListener("change",function(){document.getElementById("shared-by-container").style.display=this.checked?"block":"none"}),document.addEventListener("click",function(e){const t=e.target.closest(".remove-ingredient-button");t&&removeIngredient(t)})}async function loadDishOptions(){const e=document.getElementById("load-dish");if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, войдите в систему.");const n=collection(db,`users/${t.uid}/menu`),i=await getDocs(n);e.innerHTML="";const a=document.createElement("option");a.value="",a.textContent="Выберите блюдо",a.disabled=!0,a.selected=!0,e.appendChild(a);const o={};i.forEach(e=>{const t=e.data(),n=t.category||"Без категории";o[n]||(o[n]=[]),o[n].push({id:e.id,name:t.name})});for(const[t,n]of Object.entries(o))if(n.length>0){const i=document.createElement("optgroup");i.label=t,n.forEach(e=>{const t=document.createElement("option");t.value=e.id,t.textContent=e.name,i.appendChild(t)}),e.appendChild(i)}}catch(e){console.error("Ошибка при получении блюд:",e)}else console.error('Элемент с ID "load-dish" не найден.')}async function loadDishForEditing(){const e=document.getElementById("load-dish").value;if(e)try{const t=auth.currentUser;if(!t)return;const n=doc(db,`users/${t.uid}/menu`,e),i=await getDoc(n);if(i.exists()){const e=i.data();document.getElementById("category-name").value=e.category||"",document.getElementById("dish-name").value=e.name||"",document.getElementById("dish-description").value=e.description||"",document.getElementById("dish-total-weight").value=e.totalWeight||"",document.getElementById("dish-price").value=e.price||"",document.getElementById("shared").checked=e.shared||!1,document.getElementById("shared-by-container").style.display=e.shared?"block":"none",document.getElementById("shared-by").value=e.sharedBy||"";const t=document.getElementById("ingredients-container");t.innerHTML="",e.ingredients.forEach((e,n)=>{const i=document.createElement("div");i.classList.add("ingredient-group"),i.setAttribute("data-index",n),i.innerHTML=`\n                    <input type="text" name="ingredient-name" value="${e.name}" placeholder="Название ингредиента" required>\n                    <input type="number" name="ingredient-weight" value="${e.weight}" placeholder="Вес" class="weight-input" required>\n                    <select name="ingredient-unit">\n                        <option value="г" ${"г"===e.unit?"selected":""}>г</option>\n                        <option value="мл" ${"мл"===e.unit?"selected":""}>мл</option>\n                        <option value="шт" ${"шт"===e.unit?"selected":""}>шт</option>\n                    </select>\n                    <input type="text" name="ingredient-supplier" value="${e.supplier||""}" placeholder="Поставщик">\n                    <button type="button" class="remove-ingredient-button"><i class="fa fa-trash"></i></button>\n                `,t.appendChild(i)}),updateIngredientIndices(),document.getElementById("save-dish-button").textContent="Сохранить изменения"}else alert("Блюдо не найдено.")}catch(e){console.error("Ошибка загрузки блюда для редактирования:",e)}else alert("Пожалуйста, выберите блюдо для редактирования.")}function updateIngredientIndices(){document.querySelectorAll(".ingredient-group").forEach((e,t)=>{e.setAttribute("data-index",t)})}async function handleSubmit(e){e.preventDefault();const t=e.target.closest("form"),n=t.querySelector("#category-name"),i=t.querySelector("#dish-name"),a=t.querySelector("#dish-description"),o=t.querySelector("#dish-total-weight"),r=t.querySelector("#dish-price"),d=t.querySelector("#shared"),c=t.querySelector("#shared-by");if(!(n&&i&&a&&o&&r&&d&&c))return void console.error("Ошибка: одно из полей формы не найдено.");const l=n.value,s=i.value,u=a.value,p=parseFloat(o.value),m=parseFloat(r.value),y=d.checked,h=y?c.value:"",g=[];t.querySelectorAll(".ingredient-group").forEach(e=>{const t=e.querySelector('input[name="ingredient-name"]'),n=e.querySelector('input[name="ingredient-weight"]'),i=e.querySelector('select[name="ingredient-unit"]'),a=e.querySelector('input[name="ingredient-supplier"]');if(t&&n&&i&&a){const e=t.value,o=parseFloat(n.value),r=i.value,d=a.value;g.push({name:e,weight:o,unit:r,supplier:d})}else console.error("Ошибка: одно из полей ингредиентов не найдено.")});const v=auth.currentUser;if(!v)return;const b={category:l,name:s,description:u,totalWeight:p,price:m,shared:y,sharedBy:h,ingredients:g};try{const e=collection(db,`users/${v.uid}/menu`);let n=null;if((await getDocs(query(e,where("name","==",b.name),where("category","==",b.category)))).forEach(e=>{n=e.id}),n){const e=doc(db,`users/${v.uid}/menu`,n);if(await setDoc(e,b),b.shared){const e={category:l,name:s,description:u,totalWeight:p,sharedBy:h,ingredients:g.map(({name:e,weight:t,unit:n})=>({name:e,weight:t,unit:n}))},t=doc(db,"public_menu",n);await setDoc(t,e)}else{const e=doc(db,"public_menu",n);await deleteDoc(e)}alert("Блюдо с таким именем и категорией уже существует. Обновлено существующее блюдо.")}else{const e=doc(collection(db,`users/${v.uid}/menu`));if(await setDoc(e,b),b.shared){const t={category:l,name:s,description:u,totalWeight:p,sharedBy:h,ingredients:g.map(({name:e,weight:t,unit:n})=>({name:e,weight:t,unit:n}))},n=doc(db,"public_menu",e.id);await setDoc(n,t)}alert("Блюдо добавлено успешно!")}t.reset(),loadAdminDashboard()}catch(e){console.error("Ошибка при сохранении блюда:",e),alert("Произошла ошибка при сохранении блюда. Пожалуйста, попробуйте снова.")}}async function deleteDish(){const e=document.getElementById("load-dish").value,t=auth.currentUser;if(!e)return void alert("Пожалуйста, выберите блюдо для удаления.");if(!t)return;if(confirm("Вы уверены, что хотите удалить это блюдо?"))try{const n=doc(db,`users/${t.uid}/menu`,e),i=doc(db,"public_menu",e);await deleteDoc(n),await deleteDoc(i),alert("Блюдо успешно удалено."),loadAdminDashboard()}catch(e){console.error("Ошибка при удалении блюда:",e),alert("Произошла ошибка при удалении блюда. Пожалуйста, попробуйте снова.")}}function handleEditClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),i=t.closest(".price-container").querySelector(".save-button"),a=t.closest(".price-container").querySelector(".cancel-button");n&&i&&a&&(n.setAttribute("data-original-value",n.value),n.disabled=!1,t.style.display="none",i.style.display="inline",a.style.display="inline")}function handleSaveClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),i=t.closest(".price-container").querySelector(".edit-button"),a=t.closest(".price-container").querySelector(".cancel-button");if(!n||!i||!a)return;const o=n.value,r=t.getAttribute("data-id");console.log("Сохранение новой цены:",{dishId:r,newPrice:o});const d=auth.currentUser;d?updateDoc(doc(db,`users/${d.uid}/menu`,r),{price:o}).then(()=>{console.log("Цена успешно обновлена:",{dishId:r,newPrice:o}),alert("Цена успешно обновлена"),n.disabled=!0,t.style.display="none",a.style.display="none",i.style.display="inline"}).catch(e=>{console.error("Ошибка при обновлении цены:",e),alert(`Ошибка при обновлении цены: ${e.message}`)}):alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.")}function handleCancelClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),i=t.closest(".price-container").querySelector(".edit-button"),a=t.closest(".price-container").querySelector(".save-button");if(!n||!i||!a)return;const o=n.getAttribute("data-original-value");console.log("Отмена редактирования цены, восстановление значения:",{originalValue:o}),n.value=o,n.disabled=!0,t.style.display="none",a.style.display="none",i.style.display="inline"}function handleDeleteClick(e){const t=e.currentTarget.getAttribute("data-id");if(confirm("Вы уверены, что хотите удалить это блюдо?")){console.log("Удаление блюда:",{dishId:t});const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");deleteDoc(doc(db,`users/${e.uid}/menu`,t)).then(()=>{console.log("Блюдо успешно удалено:",{dishId:t}),alert("Блюдо успешно удалено"),showMenu()}).catch(e=>{console.error("Ошибка при удалении блюда:",e),alert(`Ошибка при удалении блюда: ${e.message}`)})}}function addDateToList(){const e=document.getElementById("calculation-order-date"),t=document.getElementById("date-list"),n=e.value;if(!n)return void alert("Пожалуйста, выберите дату.");if(document.querySelector(`.calculation-order-date[data-date="${n}"]`))return void alert("Эта дата уже была добавлена.");const i=document.createElement("div");i.classList.add("calculation-order-date"),i.setAttribute("data-date",n),i.textContent=n;const a=document.createElement("button");a.textContent="Удалить",a.addEventListener("click",()=>i.remove()),i.appendChild(a),t.appendChild(i),e.value=""}async function calculatePurchases(){document.getElementById("ingredients-list").innerHTML="<h4>Необходимые ингредиенты и их вес:</h4>";const e=document.querySelectorAll(".calculation-order-date");if(0===e.length)return void alert("Выберите хотя бы одну дату.");const t=new Map,n=document.getElementById("loading-indicator");n.style.display="flex";try{const i=auth.currentUser;if(!i)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");for(const n of e){const e=n.getAttribute("data-date");console.log(`Загрузка заказов на дату: ${e}`);const a=collection(db,`users/${i.uid}/orders`),o=await getDocs(query(a,where("orderDate","==",e)));if(o.empty)console.warn(`Заказы на дату ${e} не найдены.`);else for(const n of o.docs){const a=n.data().menuItems;console.log(`Обработка заказа с ${a.length} элементами меню на дату ${e}`);for(const e of a)await getIngredientsForDish(i.uid,e.name,e.quantity,t)}}displayIngredients(t)}catch(e){console.error("Ошибка при расчете закупок:",e),alert(`Ошибка при расчете закупок: ${e.message}`)}finally{n.style.display="none"}}async function getIngredientsForDish(e,t,n,i){console.log(`Загрузка ингредиентов для блюда: ${t}`);const a=collection(db,`users/${e}/menu`),o=await getDocs(query(a,where("name","==",t)));if(o.empty)return void console.warn(`Блюдо ${t} не найдено в меню.`);o.docs[0].data().ingredients.forEach(e=>{const t=e.name.replace(/\s+/g," ").trim().toLowerCase(),a=parseFloat(e.weight);if(i.has(t)){const e=i.get(t);i.set(t,e+a*n)}else i.set(t,a*n)})}function displayIngredients(e){const t=document.getElementById("ingredients-list");if(0===e.size)return void(t.innerHTML+="<p>Ингредиенты не найдены.</p>");const n=document.createElement("ul");e.forEach((e,t)=>{let i=e,a="г";e>200&&(i/=1e3,a="кг"),i=i%1==0?i:i.toFixed(2);const o=document.createElement("li");o.textContent=`${capitalizeFirstLetter(t)}: ${i} ${a}`,n.appendChild(o)}),t.appendChild(n)}function capitalizeFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}async function loadOrderByDate(){const e=document.getElementById("load-order-date").value;try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=collection(db,`users/${t.uid}/orders`),i=await getDocs(query(n,where("orderDate","==",e)));if(i.empty)return void alert("Заказ на эту дату не найден.");const a=i.docs[0],o=a.data();currentOrderId=a.id,document.getElementById("order-date").value=o.orderDate,document.getElementById("end-date").value=o.endDate;const r=document.getElementById("order-blank");r.innerHTML="",o.menuItems.forEach(e=>{const t=document.createElement("div");t.classList.add("order-item"),t.innerHTML=`\n                <p>${e.name}</p>\n                <input type="number" value="${e.quantity}" min="1" class="dish-quantity" data-price="${e.price}">\n                <span>${e.price} руб.</span>\n                <span class="dish-total-price">${e.total}</span>\n                <button type="button" class="remove-button">Удалить</button>\n            `,t.querySelector(".remove-button").addEventListener("click",()=>{r.removeChild(t),updateTotalSum()}),t.querySelector(".dish-quantity").addEventListener("input",()=>{updateDishTotalPrice(t),updateTotalSum()}),r.appendChild(t)});const d=document.getElementById("additional-services");d.innerHTML='<button type="button" id="add-service">Добавить услугу</button>',o.additionalServices.forEach(e=>{const t=document.createElement("div");t.classList.add("service"),t.innerHTML=`\n                <input type="text" name="service-name" value="${e.name}" required>\n                <input type="number" name="service-quantity" value="${e.quantity}" min="1">\n                <input type="number" name="service-price" value="${e.price}" required>\n                <input type="number" name="service-total" value="${e.total}" readonly>\n                <button type="button" class="remove-service">Удалить</button>\n            `,t.querySelector(".remove-service").addEventListener("click",()=>{t.remove(),updateFinalSum()}),t.querySelector('input[name="service-quantity"]').addEventListener("input",updateServiceTotal),t.querySelector('input[name="service-price"]').addEventListener("input",updateServiceTotal),d.appendChild(t)}),document.getElementById("total-sum").value=o.totalSum,document.getElementById("prepayment").value=o.prepayment,document.getElementById("final-sum").value=o.finalSum,updateFinalSum()}catch(e){console.error("Ошибка при загрузке заказа:",e),alert(`Ошибка при загрузке заказа: ${e.message}`)}}function addDishToOrder(){const e=document.getElementById("menu-items"),t=document.getElementById("order-blank"),n=e.value;if(!n)return void alert("Пожалуйста, выберите блюдо.");const i=JSON.parse(n),a=document.createElement("div");a.classList.add("order-item"),a.innerHTML=`\n        <p>${i.name}</p>\n        <input type="number" value="1" min="1" class="dish-quantity" data-price="${i.price}">\n        <span>${i.price} руб.</span>\n        <span class="dish-total-price">${i.price} руб.</span>\n        <button type="button" class="remove-button">Удалить</button>\n    `,a.querySelector(".remove-button").addEventListener("click",()=>{t.removeChild(a),updateTotalSum()}),a.querySelector(".dish-quantity").addEventListener("input",()=>{updateDishTotalPrice(a),updateTotalSum()}),t.appendChild(a),updateTotalSum()}function updateTotalSum(){let e=0;document.querySelectorAll(".order-item").forEach(t=>{const n=t.querySelector(".dish-quantity").value*t.querySelector(".dish-quantity").getAttribute("data-price");t.querySelector(".dish-total-price").textContent=`${n} руб.`,e+=n}),document.getElementById("total-sum").value=e,updateFinalSum()}function updateDishTotalPrice(e){const t=e.querySelector(".dish-quantity").value*e.querySelector(".dish-quantity").getAttribute("data-price");e.querySelector(".dish-total-price").textContent=`${t} руб.`}function addServiceField(){const e=document.getElementById("additional-services"),t=document.createElement("div");t.classList.add("service"),t.innerHTML='\n        <input type="text" name="service-name" placeholder="Название услуги" required>\n        <input type="number" name="service-quantity" placeholder="Количество" value="1" min="1">\n        <input type="number" name="service-price" placeholder="Цена" required>\n        <input type="number" name="service-total" placeholder="Итоговая сумма" readonly>\n        <button type="button" class="remove-service">Удалить</button>\n    ',t.querySelector(".remove-service").addEventListener("click",()=>{t.remove(),updateFinalSum()}),t.querySelector('input[name="service-quantity"]').addEventListener("input",updateServiceTotal),t.querySelector('input[name="service-price"]').addEventListener("input",updateServiceTotal),e.appendChild(t)}function updateServiceTotal(e){const t=e.target.closest(".service"),n=t.querySelector('input[name="service-quantity"]').value*t.querySelector('input[name="service-price"]').value;t.querySelector('input[name="service-total"]').value=n,updateFinalSum()}function updateFinalSum(){const e=parseFloat(document.getElementById("total-sum").value)||0,t=parseFloat(document.getElementById("prepayment").value)||0;let n=0;document.querySelectorAll(".service").forEach(e=>{n+=parseFloat(e.querySelector('input[name="service-total"]').value)||0});const i=e+n-t;document.getElementById("final-sum").value=i}function showPrintModal(){document.getElementById("print-content").innerHTML=generatePrintContent();const e=document.getElementById("print-modal");e.style.display="block";document.querySelector(".modal-close-button").addEventListener("click",()=>{e.style.display="none"});document.getElementById("confirm-print").addEventListener("click",()=>{window.print(),e.style.display="none"})}function generatePrintContent(){const e=document.getElementById("order-date").value,t=document.getElementById("total-sum").value,n=document.getElementById("prepayment").value,i=document.getElementById("final-sum").value;let a=`\n        <h3>Заказ на дату: ${e}</h3>\n        <h4>Бланк заказа:</h4>\n        <ul>\n    `;document.querySelectorAll(".order-item").forEach(e=>{const t=e.querySelector("p").textContent,n=e.querySelector(".dish-quantity").value,i=e.querySelector(".dish-total-price").textContent;a+=`<li>${t} &nbsp;&nbsp;&nbsp;&nbsp; ${n} шт. &nbsp;&nbsp;&nbsp;&nbsp; ${i}</li>`}),a+=`\n        </ul>\n        </br>\n        <p>Итоговая сумма заказа: ${t} руб.</p>\n        </br>\n        <h4>Дополнительные услуги:</h4>\n        <ul>\n    `;return document.querySelectorAll(".service").forEach(e=>{const t=e.querySelector('input[name="service-name"]').value,n=e.querySelector('input[name="service-quantity"]').value,i=e.querySelector('input[name="service-total"]').value;a+=`<li>${t} &nbsp;&nbsp;&nbsp;&nbsp; кол-во: ${n} &nbsp;&nbsp;&nbsp;&nbsp; ${i} руб.</li>`}),a+=`\n        </ul>\n        </br></br>\n        <p>Внесенная предоплата: ${n} руб.</p>\n        <p>Итоговая сумма с учетом услуг и предоплаты: ${i} руб.</p>\n    `}async function saveOrder(){const e=document.getElementById("order-date").value,t=document.getElementById("end-date").value,n=parseFloat(document.getElementById("total-sum").value)||0,i=parseFloat(document.getElementById("prepayment").value)||0,a=parseFloat(document.getElementById("final-sum").value)||0;let o=[];document.querySelectorAll(".order-item").forEach(e=>{o.push({name:e.querySelector("p").textContent,quantity:parseInt(e.querySelector(".dish-quantity").value),price:parseFloat(e.querySelector(".dish-quantity").getAttribute("data-price")),total:parseFloat(e.querySelector(".dish-total-price").textContent)})});let r=[];document.querySelectorAll(".service").forEach(e=>{r.push({name:e.querySelector('input[name="service-name"]').value,quantity:parseInt(e.querySelector('input[name="service-quantity"]').value),price:parseFloat(e.querySelector('input[name="service-price"]').value),total:parseFloat(e.querySelector('input[name="service-total"]').value)})});const d={orderDate:e,endDate:t,menuItems:o,additionalServices:r,totalSum:n,prepayment:i,finalSum:a};try{const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const t=collection(db,`users/${e.uid}/orders`);currentOrderId?await updateDoc(doc(t,currentOrderId),d):await addDoc(t,d),alert("Заказ успешно сохранен.")}catch(e){console.error("Ошибка при сохранении заказа:",e),alert(`Ошибка при сохранении заказа: ${e.message}`)}}import{getApp,getApps,initializeApp}from"https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";import{getFirestore,collection,addDoc,getDocs,getDoc,setDoc,updateDoc,deleteDoc,doc,query,where}from"https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";import{getAuth,signOut}from"https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";import{initializeDragAndDrop,saveIconPositions,addIconEventListeners}from"./main.js";const firebaseConfig={apiKey:"AIzaSyAjJIU3lCSJivMJ9UbihXD1dqu8ivf-8OU",authDomain:"menuhelperapp.firebaseapp.com",projectId:"menuhelperapp",storageBucket:"menuhelperapp.appspot.com",messagingSenderId:"118002716868",appId:"1:118002716868:web:2623db6910ab0771c87991"},app=getApps().length?getApp():initializeApp(firebaseConfig),db=getFirestore(app),auth=getAuth(app),ADMIN_DASHBOARD_CONTENT_ID="admin-dashboard-content",ICON1_ID="icon1",ICON2_ID="icon2",ICON3_ID="icon3",ICON4_ID="icon4",INGREDIENTS_CONTAINER_ID="ingredients-container";window.loadAdminDashboard=function(){console.log("Loading admin dashboard...");document.getElementById("admin-dashboard-content").innerHTML=`\n        <div class="icon-container" id="${ICON1_ID}" draggable="true">\n            <img src="images/icons/add_dish_icon.svg" alt="Добавить блюдо">\n            <p>Добавить блюдо</p>\n        </div>\n        <div class="icon-container" id="${ICON2_ID}" draggable="true">\n            <img src="images/icons/view_menu_icon.svg" alt="Просмотр меню">\n            <p>Просмотр меню</p>\n        </div>\n        <div class="icon-container" id="${ICON3_ID}" draggable="true">\n            <img src="images/icons/calculate_purchases_icon.svg" alt="Подсчет закупок">\n            <p>Подсчет закупок</p>\n        </div>\n        <div class="icon-container" id="${ICON4_ID}" draggable="true">\n            <img src="images/icons/order_icon.svg" alt="Оформление заказа">\n            <p>Оформление заказа</p>\n        </div>\n    `,addIconEventListeners(),initializeDragAndDrop(),function(){const e=JSON.parse(localStorage.getItem("iconPositions"));if(e){const t=document.getElementById("admin-dashboard-content");e.forEach(e=>{const n=document.getElementById(e.id);if(n){const i=parseFloat(e.left)*(t.offsetWidth/window.innerWidth),a=parseFloat(e.top)*(t.offsetHeight/window.innerHeight);n.style.left=`${i}px`,n.style.top=`${a}px`}})}}(),window.addEventListener("beforeunload",saveIconPositions)};export function loadAdminDashboard(){console.log("Loading admin dashboard...");document.getElementById("admin-dashboard-content").innerHTML=`\n        <div class="icon-container" id="${ICON1_ID}" draggable="true">\n            <img src="images/icons/add_dish_icon.svg" alt="Добавить блюдо">\n            <p>Добавить блюдо</p>\n        </div>\n        <div class="icon-container" id="${ICON2_ID}" draggable="true">\n            <img src="images/icons/view_menu_icon.svg" alt="Просмотр меню">\n            <p>Просмотр меню</p>\n        </div>\n        <div class="icon-container" id="${ICON3_ID}" draggable="true">\n            <img src="images/icons/calculate_purchases_icon.svg" alt="Подсчет закупок">\n            <p>Подсчет закупок</p>\n        </div>\n        <div class="icon-container" id="${ICON4_ID}" draggable="true">\n            <img src="images/icons/order_icon.svg" alt="Оформление заказа">\n            <p>Оформление заказа</p>\n        </div>\n    `,addIconEventListeners(),initializeDragAndDrop(),function(){const e=JSON.parse(localStorage.getItem("iconPositions"));if(e){const t=document.getElementById("admin-dashboard-content");e.forEach(e=>{const n=document.getElementById(e.id);if(n){const i=parseFloat(e.left)*(t.offsetWidth/window.innerWidth),a=parseFloat(e.top)*(t.offsetHeight/window.innerHeight);n.style.left=`${i}px`,n.style.top=`${a}px`}})}}(),window.addEventListener("beforeunload",saveIconPositions)};window.showDishForm=async function(){const e=document.getElementById("admin-dashboard-content");if(!e)return void console.error('Элемент с ID "admin-dashboard-content" не найден.');e.innerHTML='\n    <div class="container">\n        <h3 class="page-title">Добавить / Редактировать блюдо</h3>\n        <form id="dish-form">\n            <input type="text" id="category-name" name="category-name" placeholder="Название категории" required>\n            <input type="text" id="dish-name" name="dish-name" placeholder="Название блюда" required>\n            <div id="ingredients-container">\n                <h4 class="ingredients-label">Ингредиенты</h4>\n                <div class="ingredient-group">\n                    <input type="text" name="ingredient-name" placeholder="Название ингредиента" required>\n                    <input type="number" name="ingredient-weight" placeholder="Вес" class="weight-input" required>\n                    <select name="ingredient-unit">\n                        <option value="г">г</option>\n                        <option value="мл">мл</option>\n                        <option value="шт">шт</option>\n                    </select>\n                    <input type="text" name="ingredient-supplier" placeholder="Поставщик">\n                    <button type="button" class="remove-ingredient-button"><i class="fa fa-trash"></i></button>\n                </div>\n            </div>\n            <button type="button" id="add-ingredient" class="add-ingredient-button">Добавить ингредиент</button>\n            <textarea id="dish-description" name="dish-description" placeholder="Описание приготовления, процесс и время" required></textarea>\n            <input type="number" id="dish-total-weight" name="dish-total-weight" placeholder="Общий вес на порцию (г)" required>\n            <input type="number" id="dish-price" name="dish-price" step="0.01" placeholder="Цена за порцию (₽)" required>\n            <div>\n                <input type="checkbox" id="shared" name="shared">\n                <label for="shared">Предоставить доступ</label>\n            </div>\n            <div id="shared-by-container" style="display: none;">\n                <input type="text" id="shared-by" name="shared-by" placeholder="Кто предоставил доступ">\n            </div>\n            <button type="submit" id="save-dish-button" class="submit-button">Добавить блюдо</button>\n        </form>\n        <button class="back-button" onclick="loadAdminDashboard()"></button>\n        <h4>Редактировать существующее блюдо</h4>\n        <form id="load-dish-form">\n            <label for="load-dish">Выберите блюдо для редактирования:</label>\n            <select id="load-dish" name="load-dish">\n                <option value="">Выберите блюдо</option>\n            </select>\n            <button type="button" id="load-dish-button">Загрузить блюдо</button>\n            <button type="button" id="delete-dish-button">Удалить блюдо</button>\n        </form>\n    </div>\n    ',await loadDishOptions(),addEventListeners();document.getElementById("dish-form").addEventListener("submit",handleSubmit)},document.addEventListener("DOMContentLoaded",()=>{addEventListeners()}),window.showMenu=async function(){document.getElementById("admin-dashboard-content").innerHTML='\n        <div class="container">\n\n            <h3 class="page-title">Меню</h3>\n            <div id="loading-indicator" style="display: none;">\n                <p>Загрузка, пожалуйста подождите...</p>\n                <div class="spinner"></div>\n            </div>\n            <div id="menu-list"></div>\n            \n            <button class="back-button" onclick="loadAdminDashboard()"></button>\n        </div>\n    ';const e=document.getElementById("loading-indicator"),t=document.getElementById("menu-list");e.style.display="flex";try{const n=getAuth().currentUser;if(n){const e=n.uid,i=collection(db,`users/${e}/menu`),a=await getDocs(i);if(t.innerHTML="",a.empty)return void(t.innerHTML='\n                    <p>Ваше меню пока пусто. <a href="#" onclick="showAddDishForm()">Добавьте первое блюдо!</a></p>\n                ');const o={};a.forEach(e=>{const t=e.data(),n=t.category?t.category:"Без категории";o[n]||(o[n]=[]),o[n].push({id:e.id,...t}),console.log("Получено блюдо с сервера:",{id:e.id,...t})});for(const e in o){const n=document.createElement("div");n.classList.add("category"),n.innerHTML=`<h4>Категория: ${e}</h4>`,t.appendChild(n);const i=document.createElement("div");i.classList.add("dish-container"),n.appendChild(i),o[e].forEach(e=>{const t=Array.isArray(e.ingredients)&&e.ingredients.length>0?e.ingredients.map(e=>e.name).join(", "):"Нет ингредиентов",n=document.createElement("div");n.classList.add("dish-card"),n.innerHTML=`\n                    <h5>${e.name}</h5>\n                    <p class="ingredients"> ${t}</p>\n                    <p>Вес: ${e.totalWeight?e.totalWeight:"Не указано"} гр</p>\n                    <div class="price-container">\n                        <input type="number" value="${e.price}" class="price-input" data-id="${e.id}" data-original-value="${e.price}" disabled> руб.\n                        <button class="edit-button" aria-label="Редактировать"><i class="fa fa-edit"></i></button>\n                        <button class="save-button" data-id="${e.id}" style="display:none" aria-label="Сохранить"><i class="fa fa-save"></i></button>\n                        <button class="cancel-button" style="display:none" aria-label="Отменить"><i class="fa fa-times"></i></button>\n                    </div>\n                    <button class="delete-button" data-id="${e.id}" aria-label="Удалить"><i class="fa fa-trash"></i></button>\n                `;const a=n.querySelector(".ingredients");a.setAttribute("title",a.textContent.trim()),i.appendChild(n)})}document.querySelectorAll(".edit-button").forEach(e=>{e.addEventListener("click",handleEditClick)}),document.querySelectorAll(".save-button").forEach(e=>{e.addEventListener("click",handleSaveClick)}),document.querySelectorAll(".cancel-button").forEach(e=>{e.addEventListener("click",handleCancelClick)}),document.querySelectorAll(".delete-button").forEach(e=>{e.addEventListener("click",handleDeleteClick)})}else console.error("Пользователь не аутентифицирован"),alert("Пожалуйста, войдите в систему, чтобы просмотреть меню.")}catch(e){console.error("Ошибка при загрузке меню:",e),alert(`Ошибка при загрузке меню: ${e.message}`)}finally{e.style.display="none"}},window.showPurchaseCalculationForm=function(){document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="container">\n        <h3 class="page-title">Подсчет закупок</h3>\n        <div id="loading-indicator" style="display: none;">\n            <p>Загрузка, пожалуйста подождите...</p>\n            <div class="spinner"></div>\n        </div>\n        <form id="purchase-calculation-form">\n            <label for="calculation-order-date">Выберите дату заказа:</label>\n            <input type="date" id="calculation-order-date" name="calculation-order-date">\n            <button type="button" id="add-date-button">Добавить дату</button>\n            <div id="date-list"></div>\n            <button type="button" id="calculate-purchases-button">Рассчитать</button>\n            <button type="button" class="back-button" onclick="loadAdminDashboard()"></button>\n        </form>\n        <div id="ingredients-list">\n            \x3c!-- Здесь будет отображен список ингредиентов и их вес --\x3e\n        </div>\n    </div>\n    ',document.getElementById("add-date-button").addEventListener("click",addDateToList),document.getElementById("calculate-purchases-button").addEventListener("click",calculatePurchases)},window.showOrderForm=function(){document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="container">\n        <h3 class="page-title">Загрузка заказа по дате</h3>\n        <form id="load-order-form">\n            <label for="load-order-date">Выберите дату:</label>\n            <input type="date" id="load-order-date" name="load-order-date" required>\n            <button type="button" id="load-order-button">Загрузить заказ</button>\n        </form>\n\n        <h3>Оформление заказа</h3>\n        <form id="order-form">\n            <div class="container">\n                <label for="order-date">Дата заказа:</label>\n                <input type="date" id="order-date" name="order-date" required>\n            </div>\n\n            <div class="container">\n                <label for="end-date">Дата окончания:</label>\n                <input type="date" id="end-date" name="end-date" required>\n            </div>\n\n            <label for="menu-items">Выберите блюдо:</label>\n            <select id="menu-items" name="menu-items">\n                <option value="">Выберите блюдо</option>\n            </select>\n            <button type="button" id="add-dish-to-order">Добавить блюдо</button>\n\n            <h4>Бланк заказа</h4>\n            <div id="order-blank">\n                \x3c!-- Здесь будут добавляться выбранные блюда --\x3e\n            </div>\n\n            <h4>Дополнительные услуги</h4>\n            <div id="additional-services">\n                <button type="button" id="add-service">Добавить услугу</button>\n            </div>\n\n            <div class="container">\n                <label for="total-sum">Итоговая сумма заказа:</label>\n                <input type="number" id="total-sum" name="total-sum" readonly><span>&nbsp;руб.</span>\n            </div>\n\n            <div class="container">\n                <label for="prepayment">Внесенная предоплата:</label>\n                <input type="number" id="prepayment" name="prepayment"><span>&nbsp;руб.</span>\n            </div>\n\n            <div class="container">\n                <label for="final-sum">Сумма доплаты:</label>\n                <input type="number" id="final-sum" name="final-sum" readonly><span>&nbsp;руб.</span>\n            </div>\n\n            <button type="button" id="print-order">Распечатать</button>\n            <button type="button" id="save-order">Сохранить заказ</button>\n            <button type="button" class="back-button" onclick="loadAdminDashboard()"></button>\n        </form>\n\n        <div id="print-modal" class="modal">\n            <div class="modal-content">\n                <span class="modal-close-button">&times;</span>\n                <div id="print-content"></div>\n                <button type="button" id="confirm-print">Печать</button>\n            </div>\n        </div>\n    </div>\n    ',loadMenuItems(),document.getElementById("add-dish-to-order").addEventListener("click",addDishToOrder),document.getElementById("add-service").addEventListener("click",addServiceField),document.getElementById("prepayment").addEventListener("input",updateFinalSum),document.getElementById("print-order").addEventListener("click",showPrintModal),document.getElementById("save-order").addEventListener("click",saveOrder),document.getElementById("load-order-button").addEventListener("click",loadOrderByDate)};let currentOrderId=null;window.loadMenuItems=async function(){const e=document.getElementById("menu-items");try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=collection(db,`users/${t.uid}/menu`);(await getDocs(n)).forEach(t=>{const n=t.data(),i=document.createElement("option");i.value=JSON.stringify({id:t.id,name:n.name,price:n.price}),i.textContent=n.name,e.appendChild(i)})}catch(e){console.error("Ошибка при получении блюд:",e),alert(`Ошибка при получении блюд: ${e.message}`)}},window.logout=function(){signOut(auth).then(()=>{document.getElementById("admin-dashboard-container").style.display="none",document.getElementById("auth-container").style.display="block"}).catch(e=>{alert(`Ошибка при выходе: ${e.message}`)})};