function showAdminContent(){const e=document.getElementById("admin-dashboard-container"),t=document.getElementById("admin-dashboard-content");e&&t?(e.style.display="none",t.style.display="block"):console.error("Ошибка: не удалось найти admin-dashboard-container или admin-dashboard-content.")}function removeIngredient(e){const t=e.closest(".ingredient-group");t&&t.remove()}async function addIngredientField(){const e=await loadSupplierOptions(),t=document.getElementById("ingredients-container"),n=t.querySelectorAll(".ingredient-group").length,o=document.createElement("div");o.classList.add("ingredient-group"),o.setAttribute("data-index",n),o.innerHTML=`\n        <input type="text" name="ingredient-name" placeholder="Название ингредиента" required>\n        <input type="number" name="ingredient-weight" placeholder="Вес" class="weight-input" required>\n        <select name="ingredient-unit">\n            <option value="г">г</option>\n            <option value="мл">мл</option>\n            <option value="шт">шт</option>\n        </select>\n        <select name="ingredient-supplier">\n            <option value="">Выберите поставщика</option>\n            ${e}\n        </select>\n        <button type="button" class="remove-ingredient-button"><i class="fa fa-trash"></i></button>\n    `,t.appendChild(o)}function addEventListeners(){const e=document.getElementById("add-ingredient"),t=document.getElementById("load-dish-button"),n=document.getElementById("delete-dish-button"),o=document.getElementById("save-dish-button"),i=document.getElementById("shared");e&&e.addEventListener("click",addIngredientField),t&&t.addEventListener("click",loadDishForEditing),n&&n.addEventListener("click",deleteDish),o&&o.addEventListener("click",handleSubmit),i&&i.addEventListener("change",function(){document.getElementById("shared-by-container").style.display=this.checked?"block":"none"}),document.addEventListener("click",function(e){const t=e.target.closest(".remove-ingredient-button");t&&removeIngredient(t)})}async function loadSupplierOptions(){console.log("Функция loadSupplierOptions() вызвана");const e=auth.currentUser;if(e){const t=e.uid,n=collection(db,`users/${t}/suppliers`),o=await getDocs(n);if(console.log("Запрос к базе данных выполнен. Полученные данные:",o),o.empty)return console.log("Список поставщиков пуст."),'<option value="">У вас нет поставщиков. <a href="#" onclick="showAddSupplierForm()">Добавьте первого поставщика!</a></option>';let i="";return o.forEach(e=>{const t=e.data();console.log("Найден поставщик:",t),i+=`<option value="${e.id}">${t.suppliersName}</option>`}),console.log("Сформированные опции для селекта:",i),i}return console.error("Пользователь не аутентифицирован"),alert("Пожалуйста, войдите в систему, чтобы загрузить список поставщиков."),'<option value="">Ошибка загрузки поставщиков</option>'}async function loadDishOptions(){const e=document.getElementById("load-dish");if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, войдите в систему.");const n=collection(db,`users/${t.uid}/menu`),o=await getDocs(n);e.innerHTML="";const i=document.createElement("option");i.value="",i.textContent="Выберите блюдо",i.disabled=!0,i.selected=!0,e.appendChild(i);const r={};o.forEach(e=>{const t=e.data(),n=t.category||"Без категории";r[n]||(r[n]=[]),r[n].push({id:e.id,name:t.name})});for(const[t,n]of Object.entries(r))if(n.length>0){const o=document.createElement("optgroup");o.label=t,n.forEach(e=>{const t=document.createElement("option");t.value=e.id,t.textContent=e.name,o.appendChild(t)}),e.appendChild(o)}}catch(e){console.error("Ошибка при получении блюд:",e)}else console.error('Элемент с ID "load-dish" не найден.')}async function loadDishForEditing(){const e=document.getElementById("load-dish").value;if(e)try{const t=auth.currentUser;if(!t)return;const n=doc(db,`users/${t.uid}/menu`,e),o=await getDoc(n);if(o.exists()){const e=o.data();document.getElementById("category-name").value=e.category||"",document.getElementById("dish-name").value=e.name||"",document.getElementById("dish-description").value=e.description||"",document.getElementById("dish-total-weight").value=e.totalWeight||"",document.getElementById("dish-price").value=e.price||"",document.getElementById("shared").checked=e.shared||!1,document.getElementById("shared-by-container").style.display=e.shared?"block":"none",document.getElementById("shared-by").value=e.sharedBy||"";const t=document.getElementById("ingredients-container");t.innerHTML="";const n=await loadSupplierOptions();e.ingredients.forEach((e,o)=>{const i=document.createElement("div");i.classList.add("ingredient-group"),i.setAttribute("data-index",o),i.innerHTML=`\n                    <input type="text" name="ingredient-name" value="${e.name}" placeholder="Название ингредиента" required>\n                    <input type="number" name="ingredient-weight" value="${e.weight}" placeholder="Вес" class="weight-input" required>\n                    <select name="ingredient-unit">\n                        <option value="г" ${"г"===e.unit?"selected":""}>г</option>\n                        <option value="мл" ${"мл"===e.unit?"selected":""}>мл</option>\n                        <option value="шт" ${"шт"===e.unit?"selected":""}>шт</option>\n                    </select>\n                    <select name="ingredient-supplier">\n                        <option value="">Выберите поставщика</option>\n                        ${n}\n                    </select>\n                    <button type="button" class="remove-ingredient-button"><i class="fa fa-trash"></i></button>\n                `,t.appendChild(i)}),updateIngredientIndices(),document.getElementById("save-dish-button").textContent="Сохранить изменения"}else alert("Блюдо не найдено.")}catch(e){console.error("Ошибка загрузки блюда для редактирования:",e)}else alert("Пожалуйста, выберите блюдо для редактирования.")}function updateIngredientIndices(){document.getElementById("ingredients-container").querySelectorAll(".ingredient-group").forEach((e,t)=>{e.setAttribute("data-index",t)})}async function handleSubmit(e){e.preventDefault();const t=e.target.closest("form"),n=t.querySelector("#category-name"),o=t.querySelector("#dish-name"),i=t.querySelector("#dish-description"),r=t.querySelector("#dish-total-weight"),a=t.querySelector("#dish-price"),d=t.querySelector("#shared"),s=t.querySelector("#shared-by");if(!(n&&o&&i&&r&&a&&d&&s))return void console.error("Ошибка: одно из полей формы не найдено.");const l=n.value,c=o.value,u=i.value,p=parseFloat(r.value),m=parseFloat(a.value),h=d.checked,y=h?s.value:"",g=[];t.querySelectorAll(".ingredient-group").forEach(e=>{const t=e.querySelector('input[name="ingredient-name"]'),n=e.querySelector('input[name="ingredient-weight"]'),o=e.querySelector('select[name="ingredient-unit"]'),i=e.querySelector('select[name="ingredient-supplier"]');if(t&&n&&o&&i){const e=t.value,r=parseFloat(n.value),a=o.value,d=i.options[i.selectedIndex].text;g.push({name:e,weight:r,unit:a,supplier:d})}else console.error("Ошибка: одно из полей ингредиентов не найдено.")});const b=auth.currentUser;if(!b)return;const v={category:l,name:c,description:u,totalWeight:p,price:m,shared:h,sharedBy:y,ingredients:g};try{const e=collection(db,`users/${b.uid}/menu`);let n=null;if((await getDocs(query(e,where("name","==",v.name),where("category","==",v.category)))).forEach(e=>{n=e.id}),n){const e=doc(db,`users/${b.uid}/menu`,n);if(await setDoc(e,v),v.shared){const e={category:l,name:c,description:u,totalWeight:p,sharedBy:y,ingredients:g.map(({name:e,weight:t,unit:n})=>({name:e,weight:t,unit:n}))},t=doc(db,"public_menu",n);await setDoc(t,e)}else{const e=doc(db,"public_menu",n);await deleteDoc(e)}alert("Блюдо с таким именем и категорией уже существует. Обновлено существующее блюдо.")}else{const e=doc(collection(db,`users/${b.uid}/menu`));if(await setDoc(e,v),v.shared){const t={category:l,name:c,description:u,totalWeight:p,sharedBy:y,ingredients:g.map(({name:e,weight:t,unit:n})=>({name:e,weight:t,unit:n}))},n=doc(db,"public_menu",e.id);await setDoc(n,t)}alert("Блюдо добавлено успешно!")}t.reset(),loadAdminDashboard()}catch(e){console.error("Ошибка при сохранении блюда:",e),alert("Произошла ошибка при сохранении блюда. Пожалуйста, попробуйте снова.")}}async function deleteDish(){const e=document.getElementById("load-dish").value,t=auth.currentUser;if(!e)return void alert("Пожалуйста, выберите блюдо для удаления.");if(!t)return;if(confirm("Вы уверены, что хотите удалить это блюдо?"))try{const n=doc(db,`users/${t.uid}/menu`,e),o=doc(db,"public_menu",e);await deleteDoc(n),await deleteDoc(o),alert("Блюдо успешно удалено."),loadAdminDashboard()}catch(e){console.error("Ошибка при удалении блюда:",e),alert("Произошла ошибка при удалении блюда. Пожалуйста, попробуйте снова.")}}function handleEditClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),o=t.closest(".price-container").querySelector(".save-button"),i=t.closest(".price-container").querySelector(".cancel-button");n&&o&&i&&(n.setAttribute("data-original-value",n.value),n.disabled=!1,t.style.display="none",o.style.display="inline",i.style.display="inline")}function handleSaveClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),o=t.closest(".price-container").querySelector(".edit-button"),i=t.closest(".price-container").querySelector(".cancel-button");if(!n||!o||!i)return;const r=n.value,a=t.getAttribute("data-id");console.log("Сохранение новой цены:",{dishId:a,newPrice:r});const d=auth.currentUser;d?updateDoc(doc(db,`users/${d.uid}/menu`,a),{price:r}).then(()=>{console.log("Цена успешно обновлена:",{dishId:a,newPrice:r}),alert("Цена успешно обновлена"),n.disabled=!0,t.style.display="none",i.style.display="none",o.style.display="inline"}).catch(e=>{console.error("Ошибка при обновлении цены:",e),alert(`Ошибка при обновлении цены: ${e.message}`)}):alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.")}function handleCancelClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),o=t.closest(".price-container").querySelector(".edit-button"),i=t.closest(".price-container").querySelector(".save-button");if(!n||!o||!i)return;const r=n.getAttribute("data-original-value");console.log("Отмена редактирования цены, восстановление значения:",{originalValue:r}),n.value=r,n.disabled=!0,t.style.display="none",i.style.display="none",o.style.display="inline"}function handleDeleteClick(e){const t=e.currentTarget.getAttribute("data-id");if(confirm("Вы уверены, что хотите удалить это блюдо?")){console.log("Удаление блюда:",{dishId:t});const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");deleteDoc(doc(db,`users/${e.uid}/menu`,t)).then(()=>{console.log("Блюдо успешно удалено:",{dishId:t}),alert("Блюдо успешно удалено"),showMenu()}).catch(e=>{console.error("Ошибка при удалении блюда:",e),alert(`Ошибка при удалении блюда: ${e.message}`)})}}async function addOrderToList(){const e=document.getElementById("order-select").value;if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован.");const n=collection(db,`users/${t.uid}/orders`),o=doc(n,e),i=await getDoc(o);if(!i.exists())return void alert("Заказ не найден.");const r=i.data(),a=document.getElementById("date-list"),d=r.orderDate.toDate().toISOString().split("T")[0];if(document.querySelector(`.calculation-order-date[data-date="${d}"]`))return void alert("Заказы на эту дату уже были добавлены.");const s=document.createElement("div");s.classList.add("calculation-order-date"),s.setAttribute("data-date",r.orderDate.toDate().toISOString().split("T")[0]),s.setAttribute("data-order-id",e),s.innerHTML=`\n            <p><strong>Дата заказа:</strong> ${r.orderDate.toDate().toISOString().split("T")[0]}</p>\n            <p><strong>Имя заказчика:</strong> ${r.customerName||"Не указано"}</p>\n            <p><strong>Телефон заказчика:</strong> ${r.customerPhone||"Не указано"}</p>\n            <button type="button" class="remove-date-button">Удалить</button>\n        `,s.querySelector(".remove-date-button").addEventListener("click",()=>s.remove()),a.appendChild(s)}catch(e){console.error("Ошибка при добавлении заказа в список:",e),alert(`Ошибка при добавлении заказа: ${e.message}`)}else alert("Выберите заказ для добавления.")}async function calculatePurchases(){document.getElementById("ingredients-list").innerHTML="<h4>Необходимые ингредиенты и их вес:</h4>";const e=document.querySelectorAll(".calculation-order-date");if(0===e.length)return void alert("Добавьте хотя бы один заказ для расчета.");const t=new Map,n=document.getElementById("loading-indicator");n.style.display="flex";try{const o=auth.currentUser;if(!o)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");for(const n of e){const e=n.getAttribute("data-date"),i=n.getAttribute("data-order-id");console.log(`Загрузка заказа с ID: ${i} на дату: ${e}`);const r=collection(db,`users/${o.uid}/orders`),a=doc(r,i),d=await getDoc(a);if(!d.exists()){console.warn(`Заказ с ID ${i} не найден.`);continue}const s=d.data().menuItems;console.log(`Обработка заказа с ${s.length} элементами меню на дату ${e}`);for(const e of s)await getIngredientsForDish(o.uid,e.name,e.quantity,t)}displayIngredients(t)}catch(e){console.error("Ошибка при расчете закупок:",e),alert(`Ошибка при расчете закупок: ${e.message}`)}finally{n.style.display="none"}}async function getIngredientsForDish(e,t,n,o){console.log(`Загрузка ингредиентов для блюда: ${t}`);const i=collection(db,`users/${e}/menu`),r=await getDocs(query(i,where("name","==",t)));if(r.empty)return void console.warn(`Блюдо ${t} не найдено в меню.`);r.docs[0].data().ingredients.forEach(e=>{const t=e.name.replace(/\s+/g," ").trim().toLowerCase(),i=parseFloat(e.weight)*n,r=e.unit||"г",a=`${e.supplier||"Без поставщика"}|${t}|${r}`;if(o.has(a)){const e=o.get(a);o.set(a,e+i)}else o.set(a,i)})}function displayIngredients(e){const t=document.getElementById("ingredients-list");if(t.innerHTML="",0===e.size)return void(t.innerHTML+="<p>Ингредиенты не найдены.</p>");const n=new Map;e.forEach((e,t)=>{const[o,i,r]=t.split("|");n.has(o)||n.set(o,[]),n.get(o).push({ingredientName:i,totalWeight:e,unit:r})}),n.forEach((e,n)=>{const o=document.createElement("div");o.classList.add("supplier-group");const i=document.createElement("h4");i.textContent=`Поставщик: ${n}`,o.appendChild(i);const r=document.createElement("ul");e.forEach(({ingredientName:e,totalWeight:t,unit:n})=>{let o=t;"г"===n&&t>1e3?(o/=1e3,n="кг"):"мл"===n&&t>1e3&&(o/=1e3,n="л"),o=o%1==0?o:o.toFixed(2);const i=document.createElement("li");i.textContent=`${capitalizeFirstLetter(e)}: ${o} ${n}`,r.appendChild(i)}),o.appendChild(r),t.appendChild(o)})}function capitalizeFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}async function loadOrderByDate(){const e=document.getElementById("order-select").value;if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=doc(db,`users/${t.uid}/orders/${e}`),o=await getDoc(n);if(!o.exists())return void alert("Заказ не найден.");const i=o.data();currentOrderId=e,document.getElementById("order-date").value=i.orderDate.toDate().toISOString().split("T")[0],document.getElementById("order-customer-name").value=i.customerName||"",document.getElementById("order-customer-phone").value=i.customerPhone||"",document.getElementById("order-else-properties").value=i.additionalProperties||"";const r=document.getElementById("order-blank");r.innerHTML="";const a={};i.menuItems.forEach(e=>{const t=e.category||"Без категории";a[t]||(a[t]=[]),a[t].push(e)});for(const[e,t]of Object.entries(a)){let n=document.createElement("div");n.classList.add("category-container"),n.setAttribute("data-category",e);const o=document.createElement("h3");o.textContent=e,n.appendChild(o),t.forEach(e=>{const t=document.createElement("div");t.classList.add("order-item"),t.innerHTML=`\n                    <p>${e.name}</p>\n                    <input type="number" value="${e.quantity}" min="1" class="dish-quantity" data-price="${e.price}">\n                    <span>${e.price} руб.</span>\n                    <span class="dish-total-price">${e.total} руб.</span>\n                    <button type="button" class="remove-button"><i class="fa fa-trash"></i></button>\n                `,t.querySelector(".remove-button").addEventListener("click",()=>{n.removeChild(t),1===n.children.length&&r.removeChild(n),updateTotalSum()}),t.querySelector(".dish-quantity").addEventListener("input",()=>{updateDishTotalPrice(t),updateTotalSum()}),n.appendChild(t)}),r.appendChild(n)}const d=document.getElementById("additional-services");d.innerHTML='<button type="button" id="add-service">Добавить услугу</button>',i.additionalServices.forEach(e=>{const t=document.createElement("div");t.classList.add("service"),t.innerHTML=`\n                <input type="text" name="service-name" value="${e.name}" required>\n                <input type="number" name="service-quantity" value="${e.quantity}" min="1">\n                <input type="number" name="service-price" value="${e.price}" required>\n                <input type="number" name="service-total" value="${e.total}" readonly>\n                <button type="button" class="remove-service">Удалить</button>\n            `,t.querySelector(".remove-service").addEventListener("click",()=>{t.remove(),updateFinalSum()}),t.querySelector('input[name="service-quantity"]').addEventListener("input",updateServiceTotal),t.querySelector('input[name="service-price"]').addEventListener("input",updateServiceTotal),d.appendChild(t)}),document.getElementById("total-sum").value=i.totalSum,document.getElementById("prepayment").value=i.prepayment,document.getElementById("final-sum").value=i.finalSum,updateFinalSum()}catch(e){console.error("Ошибка при загрузке заказа:",e),alert(`Ошибка при загрузке заказа: ${e.message}`)}else alert("Выберите заказ для загрузки.")}function addDishToOrder(){const e=document.getElementById("menu-items"),t=document.getElementById("order-blank"),n=e.value;if(!n)return void alert("Пожалуйста, выберите блюдо.");const o=JSON.parse(n),i=o.category?o.category:"Без категории";let r=document.querySelector(`.category-container[data-category="${i}"]`);if(!r){(r=document.createElement("div")).classList.add("category-container"),r.setAttribute("data-category",i);const e=document.createElement("h3");e.textContent=i,r.appendChild(e),t.appendChild(r)}const a=document.createElement("div");a.classList.add("order-item"),a.innerHTML=`\n        <p>${o.name}</p>\n        <input type="number" value="1" min="1" class="dish-quantity" data-price="${o.price}">\n        <span>${o.price} руб.</span>\n        <span class="dish-total-price">${o.price} руб.</span>\n        <button type="button" class="remove-button"><i class="fa fa-trash"></i></button>\n    `,updateTotalSum(),a.querySelector(".remove-button").addEventListener("click",()=>{r.removeChild(a),1===r.children.length&&t.removeChild(r),updateTotalSum()}),a.querySelector(".dish-quantity").addEventListener("input",()=>{updateDishTotalPrice(a),updateTotalSum()}),r.appendChild(a),updateTotalSum()}function updateTotalSum(){let e=0;document.querySelectorAll(".order-item").forEach(t=>{const n=((parseFloat(t.querySelector(".dish-quantity").value)||0)*(parseFloat(t.querySelector(".dish-quantity").getAttribute("data-price"))||0)).toFixed(2);t.querySelector(".dish-total-price").textContent=`${n} руб.`,e+=parseFloat(n)}),document.getElementById("total-sum").value=e.toFixed(2),updateFinalSum()}function updateDishTotalPrice(e){const t=((parseFloat(e.querySelector(".dish-quantity").value)||0)*(parseFloat(e.querySelector(".dish-quantity").getAttribute("data-price"))||0)).toFixed(2);e.querySelector(".dish-total-price").textContent=`${t} руб.`,updateTotalSum()}function addServiceField(){const e=document.getElementById("additional-services"),t=document.createElement("div");t.classList.add("service"),t.innerHTML='\n        <input type="text" name="service-name" placeholder="Название услуги" required>\n        <input type="number" name="service-quantity" placeholder="Количество" value="1" min="1">\n        <input type="number" name="service-price" placeholder="Цена" required>\n        <input type="number" name="service-total" placeholder="Итоговая сумма" readonly>\n        <button type="button" class="remove-service"><i class="fa fa-trash"></i></button>\n    ',t.querySelector(".remove-service").addEventListener("click",()=>{t.remove(),updateFinalSum()}),t.querySelector('input[name="service-quantity"]').addEventListener("input",updateServiceTotal),t.querySelector('input[name="service-price"]').addEventListener("input",updateServiceTotal),e.appendChild(t)}function updateServiceTotal(e){const t=e.target.closest(".service"),n=((parseFloat(t.querySelector('input[name="service-quantity"]').value)||0)*(parseFloat(t.querySelector('input[name="service-price"]').value)||0)).toFixed(2);t.querySelector('input[name="service-total"]').value=n,updateFinalSum()}function updateFinalSum(){const e=parseFloat(document.getElementById("total-sum").value)||0,t=parseFloat(document.getElementById("prepayment").value)||0;let n=0;document.querySelectorAll(".service").forEach(e=>{n+=parseFloat(e.querySelector('input[name="service-total"]').value)||0});const o=(e+n-t).toFixed(2);document.getElementById("final-sum").value=o}function showPrintModal(){const e=generatePrintContent(),t=document.getElementById("print-modal");document.getElementById("print-content").innerHTML=e,t.classList.remove("hidden");document.querySelector(".modal-close-button").addEventListener("click",()=>{t.classList.add("hidden")});document.getElementById("confirm-print").addEventListener("click",()=>{printElement(e),t.classList.add("hidden")})}function printElement(e){const t=window.open("","","height=600,width=800");t.document.write(`\n        <html>\n            <head>\n                <title>Печать заказа</title>\n                <style>\n                    /* Стили для печати */\n                    body {\n                        font-family: Arial, sans-serif;\n                        margin: 20px;\n                    }\n                    h3, h4, h5 {\n                        margin: 0;\n                        padding: 5px 0;\n                    }\n                    ul {\n                        list-style-type: none;\n                        padding: 0;\n                    }\n                    li {\n                        padding: 5px 0;\n                    }\n                    p {\n                        margin: 10px 0;\n                    }\n                </style>\n            </head>\n            <body>\n                ${e}\n            </body>\n        </html>\n    `),t.document.close(),t.focus(),t.print(),t.close()}function generatePrintContent(){const e=document.getElementById("order-date").value,t=parseFloat(document.getElementById("total-sum").value).toFixed(2),n=parseFloat(document.getElementById("prepayment").value).toFixed(2),o=parseFloat(document.getElementById("final-sum").value).toFixed(2);let i=`\n        <h3>Заказ на дату: ${e}</h3>\n        <h4>Бланк заказа:</h4>\n    `;document.querySelectorAll(".category-container").forEach(e=>{const t=e.getAttribute("data-category");i+=`<h5>${t}</h5><ul>`;e.querySelectorAll(".order-item").forEach(e=>{const t=e.querySelector("p").textContent,n=e.querySelector(".dish-quantity").value,o=e.querySelector(".dish-total-price").textContent;i+=`<li>${t} &nbsp;&nbsp;&nbsp;&nbsp; ${n} шт. &nbsp;&nbsp;&nbsp;&nbsp; ${o}</li>`}),i+="</ul>"}),i+=`\n        </br>\n        <p>Итоговая сумма заказа: ${t} руб.</p>\n        </br>\n        <h4>Дополнительные услуги:</h4>\n        <ul>\n    `;return document.querySelectorAll(".service").forEach(e=>{const t=e.querySelector('input[name="service-name"]').value,n=e.querySelector('input[name="service-quantity"]').value,o=parseFloat(e.querySelector('input[name="service-total"]').value).toFixed(2)+" руб.";i+=`<li>${t} &nbsp;&nbsp;&nbsp;&nbsp; кол-во: ${n} &nbsp;&nbsp;&nbsp;&nbsp; ${o}</li>`}),i+=`\n        </ul>\n        </br></br>\n        <p>Внесенная предоплата: ${n} руб.</p>\n        <p>Итоговая сумма с учетом услуг и предоплаты: ${o} руб.</p>\n    `}async function saveOrder(){const e=new Date(document.getElementById("order-date").value),t=parseFloat(document.getElementById("total-sum").value)||0,n=parseFloat(document.getElementById("prepayment").value)||0,o=parseFloat(document.getElementById("final-sum").value)||0,i={orderDate:Timestamp.fromDate(e),customerName:document.getElementById("order-customer-name").value,customerPhone:document.getElementById("order-customer-phone").value,additionalProperties:document.getElementById("order-else-properties").value,menuItems:[],additionalServices:[],totalSum:t,prepayment:n,finalSum:o};document.querySelectorAll(".category-container").forEach(e=>{const t=e.getAttribute("data-category");e.querySelectorAll(".order-item").forEach(e=>{const n=e.querySelector("p").textContent,o=parseFloat(e.querySelector(".dish-quantity").value)||0,r=parseFloat(e.querySelector(".dish-quantity").getAttribute("data-price"))||0,a=parseFloat(e.querySelector(".dish-total-price").textContent)||0;i.menuItems.push({category:t,name:n,quantity:o,price:r,total:a})})}),document.querySelectorAll(".service").forEach(e=>{const t=e.querySelector('input[name="service-name"]').value,n=parseFloat(e.querySelector('input[name="service-quantity"]').value)||0,o=parseFloat(e.querySelector('input[name="service-price"]').value)||0,r=parseFloat(e.querySelector('input[name="service-total"]').value)||0;i.additionalServices.push({name:t,quantity:n,price:o,total:r})});try{const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const t=collection(db,`users/${e.uid}/orders`);currentOrderId?await updateDoc(doc(t,currentOrderId),i):await addDoc(t,i),alert("Заказ успешно сохранен.")}catch(e){console.error("Ошибка при сохранении заказа:",e),alert(`Ошибка при сохранении заказа: ${e.message}`)}loadOrders()}async function loadOrders(){try{const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован.");const t=collection(db,`users/${e.uid}/orders`),n=new Date,o=new Date(n.setMonth(n.getMonth()-1)),i=Timestamp.fromDate(o),r=await getDocs(query(t,where("orderDate",">=",i))),a=document.getElementById("order-select");a.innerHTML='<option value="">Выберите заказ:</option>';const d={};r.forEach(e=>{const t=e.data(),n=t.orderDate.toDate().toISOString().split("T")[0];d[n]||(d[n]=[]),d[n].push({id:e.id,customerName:t.customerName,customerPhone:t.customerPhone})}),Object.keys(d).sort().forEach(e=>{const t=document.createElement("optgroup");t.label=e,d[e].forEach(e=>{const n=document.createElement("option");n.value=e.id,n.textContent=`${e.customerName} (${e.customerPhone})`,t.appendChild(n)}),a.appendChild(t)})}catch(e){console.error("Ошибка при загрузке заказов:",e),alert(`Ошибка при загрузке заказов: ${e.message}`)}}async function deleteOrder(){const e=document.getElementById("order-select").value;if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован.");const n=collection(db,`users/${t.uid}/orders`);await deleteDoc(doc(n,e)),alert("Заказ успешно удален."),loadOrders()}catch(e){console.error("Ошибка при удалении заказа:",e),alert(`Ошибка при удалении заказа: ${e.message}`)}else alert("Выберите заказ для удаления.")}async function handleAddSupplierSubmit(e){e.preventDefault();const t=e.target.suppliersName.value,n=e.target.suppliersPhone.value,o=e.target.suppliersAdress.value;try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const i=e.uid,r=collection(db,`users/${i}/suppliers`);await addDoc(r,{suppliersName:t,suppliersPhone:n,suppliersAdress:o,createdAt:new Date}),alert("Поставщик успешно добавлен!"),showSuppliers()}catch(e){console.error("Ошибка при добавлении поставщика:",e),alert(`Ошибка при добавлении поставщика: ${e.message}`)}}async function handleEditSupplierClick(e){const t=e.currentTarget.getAttribute("data-id");try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=e.uid,o=doc(db,`users/${n}/suppliers`,t),i=await getDoc(o);if(i.exists()){showEditSupplierForm(t,i.data())}else alert("Поставщик не найден.")}catch(e){console.error("Ошибка при загрузке данных поставщика:",e),alert(`Ошибка при загрузке данных поставщика: ${e.message}`)}}function showEditSupplierForm(e,t){document.getElementById("admin-dashboard-content").innerHTML=`\n    <div class="edit-suppliers-form-container">\n        <h2>Редактировать поставщика</h2>\n        <form id="edit-supplier-form">\n            <label for="suppliersName">Название:</label>\n            <input type="text" id="suppliersName" name="suppliersName" value="${t.suppliersName}" required>\n            \n            <label for="suppliersPhone">Телефон:</label>\n            <input type="text" id="suppliersPhone" name="suppliersPhone" value="${t.suppliersPhone}" required>\n            \n            <label for="suppliersAdress">Адрес:</label>\n            <input type="text" id="suppliersAdress" name="suppliersAdress" value="${t.suppliersAdress}" required>\n            \n            <button type="submit">Сохранить изменения</button>\n        </form>\n        <button class="back-button" onclick="showSuppliers()"></button>\n    </div>\n    `,document.getElementById("edit-supplier-form").addEventListener("submit",t=>handleEditSupplierSubmit(t,e))}async function handleEditSupplierSubmit(e,t){e.preventDefault();const n=e.target.suppliersName.value,o=e.target.suppliersPhone.value,i=e.target.suppliersAdress.value;try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const r=e.uid,a=doc(db,`users/${r}/suppliers`,t);await updateDoc(a,{suppliersName:n,suppliersPhone:o,suppliersAdress:i,updatedAt:new Date}),alert("Поставщик успешно обновлен!"),showSuppliers()}catch(e){console.error("Ошибка при обновлении поставщика:",e),alert(`Ошибка при обновлении поставщика: ${e.message}`)}}async function handleDeleteSupplierClick(e){const t=e.currentTarget.getAttribute("data-id");if(confirm("Вы уверены, что хотите удалить этого поставщика?"))try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=e.uid;await deleteDoc(doc(db,`users/${n}/suppliers`,t)),alert("Поставщик успешно удален"),showSuppliers()}catch(e){console.error("Ошибка при удалении поставщика:",e),alert(`Ошибка при удалении поставщика: ${e.message}`)}}import{getApp,getApps,initializeApp}from"https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";import{getFirestore,collection,addDoc,getDocs,getDoc,setDoc,updateDoc,deleteDoc,doc,query,where,Timestamp}from"https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";import{getAuth,signOut}from"https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";import{initializeDragAndDrop,saveIconPositions,addIconEventListeners}from"./main.js";const firebaseConfig={apiKey:"AIzaSyAjJIU3lCSJivMJ9UbihXD1dqu8ivf-8OU",authDomain:"menuhelperapp.firebaseapp.com",projectId:"menuhelperapp",storageBucket:"menuhelperapp.appspot.com",messagingSenderId:"118002716868",appId:"1:118002716868:web:2623db6910ab0771c87991"},app=getApps().length?getApp():initializeApp(firebaseConfig),db=getFirestore(app),auth=getAuth(app),ADMIN_DASHBOARD_CONTENT_ID="admin-dashboard-content",ICON1_ID="icon1",ICON2_ID="icon2",ICON3_ID="icon3",ICON4_ID="icon4",ICON5_ID="icon5";export function loadAdminDashboard(){console.log("Loading admin dashboard...");const e=document.getElementById("admin-dashboard-container"),t=document.getElementById("admin-dashboard-content");e&&t?(t.style.display="none",e.style.display="block",e.innerHTML=`\n            <h2>Рабочий стол</h2>\n            <button class="logout" onclick="logout()"><i class="fas fa-times"></i></button>\n            <div class="icon-container" id="${ICON1_ID}" draggable="true">\n                <img src="images/icons/add_dish_icon.svg" alt="Добавить блюдо">\n                <p>Добавить блюдо</p>\n            </div>\n            <div class="icon-container" id="${ICON2_ID}" draggable="true">\n                <img src="images/icons/view_menu_icon.svg" alt="Просмотр меню">\n                <p>Просмотр меню</p>\n            </div>\n            <div class="icon-container" id="${ICON3_ID}" draggable="true">\n                <img src="images/icons/calculate_purchases_icon.svg" alt="Подсчет закупок">\n                <p>Подсчет закупок</p>\n            </div>\n            <div class="icon-container" id="${ICON4_ID}" draggable="true">\n                <img src="images/icons/order_icon.svg" alt="Оформление заказа">\n                <p>Оформление заказа</p>\n            </div>\n            <div class="icon-container" id="${ICON5_ID}" draggable="true">\n                <img src="images/icons/contact_icon.svg" alt="Справочник поставщиков">\n                <p>Справочник поставщиков</p>\n            </div>\n        `,addIconEventListeners(),initializeDragAndDrop(),function(){const e=JSON.parse(localStorage.getItem("iconPositions"));if(e){const t=document.getElementById("admin-dashboard-container");e.forEach(e=>{const n=document.getElementById(e.id);if(n){const o=parseFloat(e.left)*(t.offsetWidth/window.innerWidth),i=parseFloat(e.top)*(t.offsetHeight/window.innerHeight);n.style.left=`${o}px`,n.style.top=`${i}px`}})}}(),window.addEventListener("beforeunload",saveIconPositions)):console.error("Ошибка: не удалось найти admin-dashboard-container или admin-dashboard-content.")};window.loadAdminDashboard=loadAdminDashboard,window.showDishForm=async function(){showAdminContent();const e=document.getElementById("admin-dashboard-content");if(!e)return void console.error('Элемент с ID "admin-dashboard-content" не найден.');const t=await loadSupplierOptions();e.innerHTML=`\n    <div class="add-dish-container">\n        <h3 class="page-title">Добавить блюдо</h3>\n        <form id="dish-form">\n            <input type="text" id="category-name" name="category-name" placeholder="Название категории" required>\n            <input type="text" id="dish-name" name="dish-name" placeholder="Название блюда" required>\n            <div id="ingredients-container">\n                <h4 class="ingredients-label">Ингредиенты</h4>\n                <div class="ingredient-group">\n                    <input type="text" name="ingredient-name" placeholder="Название ингредиента" required>\n                    <input type="number" name="ingredient-weight" placeholder="Вес" class="weight-input" required>\n                    <select name="ingredient-unit">\n                        <option value="г">г</option>\n                        <option value="мл">мл</option>\n                        <option value="шт">шт</option>\n                    </select>\n                    <select name="ingredient-supplier" required>\n                        <option value="">Выберите поставщика</option>\n                        ${t}\n                    </select>\n                    <button type="button" class="remove-ingredient-button"><i class="fa fa-trash"></i></button>\n                </div>\n            </div>\n            <button type="button" id="add-ingredient" class="add-ingredient-button">Добавить ингредиент</button>\n            <textarea id="dish-description" name="dish-description" placeholder="Описание приготовления, процесс и время" required></textarea>\n            <input type="number" id="dish-total-weight" name="dish-total-weight" placeholder="Общий вес на порцию (г)" required>\n            <input type="number" id="dish-price" name="dish-price" step="0.01" placeholder="Цена за порцию" required>\n            <div>\n                <input type="checkbox" id="shared" name="shared">\n                <label for="shared">Предоставить доступ</label>\n            </div>\n            <div id="shared-by-container" style="display: none;">\n                <input type="text" id="shared-by" name="shared-by" placeholder="Кто предоставил доступ">\n            </div>\n            <button type="submit" id="save-dish-button" class="submit-button">Добавить блюдо</button>\n        </form>\n        <button class="back-button" onclick="loadAdminDashboard()"></button>\n        <div class="edit-dish-container">\n            <h4>Редактировать существующее блюдо</h4>\n            <form id="load-dish-form">\n                <label for="load-dish">Выберите блюдо для редактирования:</label>\n                <select id="load-dish" name="load-dish">\n                    <option value="">Выберите блюдо</option>\n                </select>\n                <button type="button" id="load-dish-button">Загрузить блюдо</button>\n                <button type="button" id="delete-dish-button">Удалить блюдо</button>\n            </form>\n        </div>\n    </div>\n    `,await loadDishOptions(),addEventListeners();document.getElementById("dish-form").addEventListener("submit",handleSubmit)},document.addEventListener("DOMContentLoaded",()=>{addEventListeners()}),window.showMenu=async function(){showAdminContent();document.getElementById("admin-dashboard-content").innerHTML='\n        <div class="show-menu-container">\n\n            <h3 class="page-title">Меню</h3>\n            <div id="loading-indicator" style="display: none;">\n                <p>Загрузка, пожалуйста подождите...</p>\n                <div class="spinner"></div>\n            </div>\n            <div id="menu-list"></div>\n            \n            <button class="back-button" onclick="loadAdminDashboard()"></button>\n        </div>\n    ';const e=document.getElementById("loading-indicator"),t=document.getElementById("menu-list");e.style.display="flex";try{const n=getAuth().currentUser;if(n){const e=n.uid,o=collection(db,`users/${e}/menu`),i=await getDocs(o);if(t.innerHTML="",i.empty)return void(t.innerHTML='\n                    <p>Ваше меню пока пусто. <a href="#" onclick="showAddDishForm()">Добавьте первое блюдо!</a></p>\n                ');const r={};i.forEach(e=>{const t=e.data(),n=t.category?t.category:"Без категории";r[n]||(r[n]=[]),r[n].push({id:e.id,...t}),console.log("Получено блюдо с сервера:",{id:e.id,...t})});for(const e in r){const n=document.createElement("div");n.classList.add("category"),n.innerHTML=`<h4>Категория: ${e}</h4>`,t.appendChild(n);const o=document.createElement("div");o.classList.add("dish-container"),n.appendChild(o),r[e].forEach(e=>{const t=Array.isArray(e.ingredients)&&e.ingredients.length>0?e.ingredients.map(e=>e.name).join(", "):"Нет ингредиентов",n=document.createElement("div");n.classList.add("dish-card"),n.innerHTML=`\n                    <h5>${e.name}</h5>\n                    <p class="ingredients"> ${t}</p>\n                    <p>Вес: ${e.totalWeight?e.totalWeight:"Не указано"} гр</p>\n                    <div class="price-container">\n                        <input type="number" value="${e.price}" class="price-input" data-id="${e.id}" data-original-value="${e.price}" disabled> руб.\n                        <button class="edit-button" aria-label="Редактировать"><i class="fa fa-edit"></i></button>\n                        <button class="save-button" data-id="${e.id}" style="display:none" aria-label="Сохранить"><i class="fa fa-save"></i></button>\n                        <button class="cancel-button" style="display:none" aria-label="Отменить"><i class="fa fa-times"></i></button>\n                    </div>\n                    <button class="delete-button" data-id="${e.id}" aria-label="Удалить"><i class="fa fa-trash"></i></button>\n                `;const i=n.querySelector(".ingredients");i.setAttribute("title",i.textContent.trim()),o.appendChild(n)})}document.querySelectorAll(".edit-button").forEach(e=>{e.addEventListener("click",handleEditClick)}),document.querySelectorAll(".save-button").forEach(e=>{e.addEventListener("click",handleSaveClick)}),document.querySelectorAll(".cancel-button").forEach(e=>{e.addEventListener("click",handleCancelClick)}),document.querySelectorAll(".delete-button").forEach(e=>{e.addEventListener("click",handleDeleteClick)})}else console.error("Пользователь не аутентифицирован"),alert("Пожалуйста, войдите в систему, чтобы просмотреть меню.")}catch(e){console.error("Ошибка при загрузке меню:",e),alert(`Ошибка при загрузке меню: ${e.message}`)}finally{e.style.display="none"}},window.showPurchaseCalculationForm=function(){showAdminContent();document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="calculation-form-container">\n        <h3 class="page-title">Подсчет закупок</h3>\n        <div id="loading-indicator" style="display: none;">\n            <p>Загрузка, пожалуйста подождите...</p>\n            <div class="spinner"></div>\n        </div>\n        <form id="purchase-calculation-form">\n            <label for="order-select">Выберите заказ:</label>\n            <select id="order-select" name="order-select">\n                <option value="">Выберите заказ:</option>\n                \x3c!-- Динамически добавляемые опции --\x3e\n            </select>\n            <button type="button" id="load-order-button">Загрузить заказ</button>\n            <div id="date-list"></div>\n            <button type="button" id="calculate-purchases-button">Рассчитать</button>\n            <button type="button" class="back-button" onclick="loadAdminDashboard()"></button>\n        </form>\n        <div id="ingredients-list">\n            \x3c!-- Здесь будет отображен список ингредиентов и их вес --\x3e\n        </div>\n    </div>\n    ',document.getElementById("load-order-button").addEventListener("click",addOrderToList),document.getElementById("calculate-purchases-button").addEventListener("click",calculatePurchases),loadOrders()},window.showOrderForm=function(){showAdminContent(),loadOrders();document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="show-order-container">\n        <h3 class="page-title">Оформление заказа</h3>\n        <form id="order-form">\n            <div class="order-properties-container">\n                <label for="order-date">Дата заказа:</label>\n                <input type="date" id="order-date" name="order-date" required="">\n            \n                <label for="order-customer-name">Имя заказчика:</label>\n                <input type="text" id="order-customer-name" name="order-customer-name" required="">\n            \n                <label for="order-customer-phone">Телефон заказчика:</label>\n                <input type="tel" id="order-customer-phone" name="order-customer-phone" required="">\n            \n                <label for="order-else-properties">Дополнительные данные:</label>\n                <textarea name="order-else-properties" id="order-else-properties" cols="30" rows="10"></textarea>\n            </div>\n\n            <h4>Бланк заказа</h4>\n            <div id="order-blank">\n                \x3c!-- Здесь будут добавляться выбранные блюда --\x3e\n            </div>\n\n            <div class="container">\n                <label for="total-sum">Итоговая сумма заказа:</label>\n                <input type="number" id="total-sum" name="total-sum" readonly><span>&nbsp;руб.</span>\n            </div>\n\n            <label for="menu-items">Выберите блюдо:</label>\n            <select id="menu-items" name="menu-items">\n                <option value="">Выберите блюдо</option>\n            </select>\n            <button type="button" id="add-dish-to-order">Добавить блюдо</button>\n\n            <h4>Дополнительные услуги</h4></br>\n            <div id="additional-services">\n                \x3c!-- Здесь будут добавляться дополнительные услуги --\x3e\n            </div>\n            <button type="button" id="add-service">Добавить услугу</button>\n\n            <div class="container">\n                <label for="prepayment">Внесенная предоплата:</label>\n                <input type="number" id="prepayment" name="prepayment"><span>&nbsp;руб.</span>\n            </div>\n\n            <div class="container">\n                <label for="final-sum">Сумма доплаты:</label>\n                <input type="number" id="final-sum" name="final-sum" readonly><span>&nbsp;руб.</span>\n            </div>\n\n            <button type="button" id="print-order">Распечатать</button>\n            <button type="button" id="save-order">Сохранить заказ</button>\n            <button type="button" class="back-button" onclick="loadAdminDashboard()"></button>\n        </form>\n\n        <h3>Загрузка заказа по дате</h3>\n        <div class="order-select-container">\n            <label for="order-select">Выберите заказ для редактирования:</label>\n            <select id="order-select" name="order-select">\n                <option value="">Выберите заказ:</option>\n                \x3c!-- Динамически добавляемые опции --\x3e\n            </select>\n            <button type="button" id="load-order-button">Загрузить заказ</button>\n            <button type="button" id="delete-order-button">Удалить заказ</button>\n        </div>\n\n        <div id="print-modal" class="modal hidden">\n            <div class="modal-content">\n                <span class="modal-close-button">&times;</span>\n                <div id="print-content"></div>\n                <button type="button" id="confirm-print">Печать</button>\n            </div>\n        </div>\n    </div>\n    ',loadMenuItems(),document.getElementById("add-dish-to-order").addEventListener("click",addDishToOrder),document.getElementById("add-service").addEventListener("click",addServiceField),document.getElementById("prepayment").addEventListener("input",updateFinalSum),document.getElementById("print-order").addEventListener("click",showPrintModal),document.getElementById("save-order").addEventListener("click",saveOrder),document.getElementById("load-order-button").addEventListener("click",loadOrderByDate),document.getElementById("delete-order-button").addEventListener("click",deleteOrder)};let currentOrderId=null;window.loadMenuItems=async function(){const e=document.getElementById("menu-items");if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=collection(db,`users/${t.uid}/menu`),o=await getDocs(n);e.innerHTML="";const i=document.createElement("option");i.value="",i.textContent="Выберите блюдо",i.disabled=!0,i.selected=!0,e.appendChild(i);const r={};o.forEach(e=>{const t=e.data(),n=t.category||"Без категории";r[n]||(r[n]=[]),r[n].push({id:e.id,name:t.name,price:t.price})});for(const[t,n]of Object.entries(r))if(n.length>0){const o=document.createElement("optgroup");o.label=t,n.forEach(e=>{const n=document.createElement("option");n.value=JSON.stringify({id:e.id,name:e.name,price:e.price,category:t}),n.textContent=e.name,o.appendChild(n)}),e.appendChild(o)}}catch(e){console.error("Ошибка при получении блюд:",e),alert(`Ошибка при получении блюд: ${e.message}`)}else console.error('Элемент с ID "menu-items" не найден.')},window.loadOrders=loadOrders;export async function showSuppliers(){showAdminContent();document.getElementById("admin-dashboard-content").innerHTML='\n        <div class="show-suppliers-container">\n            <h3 class="page-title">Список поставщиков</h3>\n            <div id="loading-indicator" style="display: none;">\n                <p>Загрузка, пожалуйста подождите...</p>\n                <div class="spinner"></div>\n            </div>\n            <div id="supplier-list"></div>\n            <button id="add-supplier-btn" onclick="showAddSupplierForm()">Добавить поставщика</button>\n            <button class="back-button" onclick="loadAdminDashboard()"></button>\n        </div>\n    ';const e=document.getElementById("loading-indicator"),t=document.getElementById("supplier-list");e.style.display="flex";try{const n=getAuth().currentUser;if(n){const e=n.uid,o=collection(db,`users/${e}/suppliers`),i=await getDocs(o);if(t.innerHTML="",i.empty)return void(t.innerHTML='\n                    <p>У вас пока нет поставщиков. <a href="#" onclick="showAddSupplierForm()">Добавьте первого поставщика!</a></p>\n                ');i.forEach(e=>{const n=e.data();console.log("Получен поставщик с сервера:",{id:e.id,...n});const o=document.createElement("div");o.classList.add("supplier-item"),o.innerHTML=`\n                    <p>Название: ${n.suppliersName}</p>\n                    <p>Телефон: ${n.suppliersPhone}</p>\n                    <p>Адрес: ${n.suppliersAdress}</p>\n                    <button class="edit-button" data-id="${e.id}">Редактировать</button>\n                    <button class="delete-button" data-id="${e.id}">Удалить</button>\n                `,t.appendChild(o)}),document.querySelectorAll(".edit-button").forEach(e=>{e.addEventListener("click",handleEditSupplierClick)}),document.querySelectorAll(".delete-button").forEach(e=>{e.addEventListener("click",handleDeleteSupplierClick)})}else console.error("Пользователь не аутентифицирован"),alert("Пожалуйста, войдите в систему, чтобы просмотреть список поставщиков.")}catch(e){console.error("Ошибка при загрузке списка поставщиков:",e),alert(`Ошибка при загрузке списка поставщиков: ${e.message}`)}finally{e.style.display="none"}};window.showSuppliers=showSuppliers,window.showAddSupplierForm=function(){document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="add-suppliers-form-container">\n        <h2>Добавить поставщика</h2>\n        <form id="add-supplier-form">\n            <label for="suppliersName">Название:</label>\n            <input type="text" id="suppliersName" name="suppliersName" required>\n            \n            <label for="suppliersPhone">Телефон:</label>\n            <input type="text" id="suppliersPhone" name="suppliersPhone" required>\n            \n            <label for="suppliersAdress">Адрес:</label>\n            <input type="text" id="suppliersAdress" name="suppliersAdress" required>\n            \n            <button type="submit" id="save-supplier">Сохранить</button>\n        </form>\n        <button class="back-button" onclick="showSuppliers()"></button>\n    </div>\n    ',document.getElementById("add-supplier-form").addEventListener("submit",handleAddSupplierSubmit)},window.logout=function(){signOut(auth).then(()=>{document.getElementById("admin-dashboard-container").style.display="none",document.getElementById("auth-container").style.display="block"}).catch(e=>{alert(`Ошибка при выходе: ${e.message}`)})};