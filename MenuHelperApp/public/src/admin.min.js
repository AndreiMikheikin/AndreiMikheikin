function showAdminContent(){const e=document.getElementById("admin-dashboard-container"),t=document.getElementById("admin-dashboard-content");e&&t?(e.style.display="none",t.style.display="block"):console.error("Ошибка: не удалось найти admin-dashboard-container или admin-dashboard-content.")}function removeIngredient(e){const t=e.closest(".ingredient-group");t&&t.remove()}async function addIngredientField(){const e=await loadSupplierOptions(),t=document.getElementById("ingredients-container"),n=t.querySelectorAll(".ingredient-group").length,o=document.createElement("div");o.classList.add("ingredient-group"),o.setAttribute("data-index",n),o.innerHTML=`\n        <input type="text" id="ingredient-name" name="ingredient-name" placeholder="Название ингредиента" required>\n        <input type="number" name="ingredient-weight" placeholder="Вес" class="weight-input" required>\n        <select name="ingredient-unit">\n            <option value="г">г</option>\n            <option value="мл">мл</option>\n            <option value="шт">шт</option>\n        </select>\n        <select name="ingredient-supplier">\n            <option value="">Выберите поставщика</option>\n            ${e}\n        </select>\n        <button type="button" class="remove-ingredient-button"><span class="material-icons-outlined">delete</span></button>\n    `,t.appendChild(o)}function addEventListeners(){const e=document.getElementById("add-ingredient"),t=document.getElementById("load-dish-button"),n=document.getElementById("delete-dish-button"),o=document.getElementById("save-dish-button"),a=document.getElementById("shared");e&&e.addEventListener("click",addIngredientField),t&&t.addEventListener("click",loadDishForEditing),n&&n.addEventListener("click",deleteDish),o&&o.addEventListener("click",handleSubmit),a&&a.addEventListener("change",function(){document.getElementById("shared-by-container").style.display=this.checked?"block":"none"}),document.addEventListener("click",function(e){const t=e.target.closest(".remove-ingredient-button");t&&removeIngredient(t)})}function loadSupplierOptions(){console.log("Функция loadSupplierOptions() вызвана");try{const e=getAuth().currentUser;if(!e)return alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход."),'<option value="">Ошибка: пользователь не аутентифицирован</option>';const t=`collection_suppliers_${e.uid}`;console.log("Используемый ключ localStorage:",t);const n=localStorage.getItem(t);if(!n)return console.log("Список поставщиков пуст."),'<option value="">У вас нет поставщиков. <a href="#" onclick="showAddSupplierForm()">Добавьте первого поставщика!</a></option>';const o=JSON.parse(n);console.log("Загруженные данные о поставщиках из localStorage:",o);let a="";return o.forEach(e=>{e.name?a+=`<option value="${e.id}">${e.name}</option>`:console.warn(`У поставщика с ID ${e.id} отсутствует поле "name"`)}),console.log("Сформированные опции для селекта:",a),a}catch(e){return console.error("Произошла ошибка при загрузке данных из localStorage:",e),'<option value="">Ошибка загрузки данных</option>'}}async function loadDishOptions(){const e=document.getElementById("load-dish");if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, войдите в систему.");const n=collection(db,`users/${t.uid}/menu`),o=await getDocs(n);e.innerHTML="";const a=document.createElement("option");a.value="",a.textContent="Выберите блюдо",a.disabled=!0,a.selected=!0,e.appendChild(a);const i={};o.forEach(e=>{const t=e.data(),n=t.category||"Без категории";i[n]||(i[n]=[]),i[n].push({id:e.id,name:t.name})});for(const[t,n]of Object.entries(i))if(n.length>0){const o=document.createElement("optgroup");o.label=t,n.forEach(e=>{const t=document.createElement("option");t.value=e.id,t.textContent=e.name,o.appendChild(t)}),e.appendChild(o)}}catch(e){console.error("Ошибка при получении блюд:",e)}else console.error('Элемент с ID "load-dish" не найден.')}async function loadDishForEditing(){const e=document.getElementById("load-dish").value;if(e)try{const t=auth.currentUser;if(!t)return;const n=doc(db,`users/${t.uid}/menu`,e),o=await getDoc(n);if(o.exists()){const e=o.data();document.getElementById("category-name").value=e.category||"",document.getElementById("dish-name").value=e.name||"",document.getElementById("dish-description").value=e.description||"",document.getElementById("dish-total-weight").value=e.totalWeight||"",document.getElementById("dish-price").value=e.price||"",document.getElementById("shared").checked=e.shared||!1,document.getElementById("shared-by-container").style.display=e.shared?"block":"none",document.getElementById("shared-by").value=e.sharedBy||"";const t=document.getElementById("ingredients-container");t.innerHTML="";const n=await loadSupplierOptions();e.ingredients.forEach((e,o)=>{const a=document.createElement("div");a.classList.add("ingredient-group"),a.setAttribute("data-index",o),a.innerHTML=`\n                    <input type="text" name="ingredient-name" value="${e.name}" placeholder="Название ингредиента" required>\n                    <input type="number" name="ingredient-weight" value="${e.weight}" placeholder="Вес" class="weight-input" required>\n                    <select name="ingredient-unit">\n                        <option value="г" ${"г"===e.unit?"selected":""}>г</option>\n                        <option value="мл" ${"мл"===e.unit?"selected":""}>мл</option>\n                        <option value="шт" ${"шт"===e.unit?"selected":""}>шт</option>\n                    </select>\n                    <select name="ingredient-supplier">\n                        <option value="">Выберите поставщика</option>\n                        ${n}\n                    </select>\n                    <button type="button" class="remove-ingredient-button"><span class="material-icons-outlined">delete</span></button>\n                `,t.appendChild(a)}),updateIngredientIndices(),document.getElementById("save-dish-button").textContent="Сохранить изменения"}else alert("Блюдо не найдено.")}catch(e){console.error("Ошибка загрузки блюда для редактирования:",e)}else alert("Пожалуйста, выберите блюдо для редактирования.")}function updateIngredientIndices(){document.getElementById("ingredients-container").querySelectorAll(".ingredient-group").forEach((e,t)=>{e.setAttribute("data-index",t)})}async function handleSubmit(e){e.preventDefault();const t=e.target.closest("form"),n=t.querySelector("#category-name"),o=t.querySelector("#dish-name"),a=t.querySelector("#dish-description"),i=t.querySelector("#dish-total-weight"),r=t.querySelector("#dish-price"),s=t.querySelector("#shared"),d=t.querySelector("#shared-by");if(!(n&&o&&a&&i&&r&&s&&d))return void console.error("Ошибка: одно из полей формы не найдено.");const l=n.value,c=o.value,u=a.value,p=parseFloat(i.value),m=parseFloat(r.value),h=s.checked,g=h?d.value:"",y=[];t.querySelectorAll(".ingredient-group").forEach(e=>{const t=e.querySelector('input[name="ingredient-name"]'),n=e.querySelector('input[name="ingredient-weight"]'),o=e.querySelector('select[name="ingredient-unit"]'),a=e.querySelector('select[name="ingredient-supplier"]');if(t&&n&&o&&a){const e=t.value,i=parseFloat(n.value),r=o.value,s=a.options[a.selectedIndex].text;y.push({name:e,weight:i,unit:r,supplier:s})}else console.error("Ошибка: одно из полей ингредиентов не найдено.")});const b=auth.currentUser;if(!b)return;const v={category:l,name:c,description:u,totalWeight:p,price:m,shared:h,sharedBy:g,ingredients:y};try{const e=b.uid,n=collection(db,`users/${e}/categories`),o=query(n,where("name","==",l));let a=!1;(await getDocs(o)).empty?(await addDoc(n,{name:l,createdAt:new Date,updatedAt:new Date}),a=!1,console.log(`Новая категория "${l}" добавлена в коллекцию категорий.`)):a=!0;const i=collection(db,`users/${e}/ingredients`),r=y.map(e=>e.name),s=query(i,where("name","in",r)),d=(await getDocs(s)).docs.map(e=>e.data().name),m=y.filter(e=>!d.includes(e.name));for(const e of m)await addDoc(i,{name:e.name,createdAt:new Date,updatedAt:new Date}),console.log(`Новый ингредиент "${e.name}" добавлен в коллекцию ингредиентов.`);const h=collection(db,`users/${b.uid}/menu`);let f=null;if((await getDocs(query(h,where("name","==",v.name),where("category","==",v.category)))).forEach(e=>{f=e.id}),f){const e=doc(db,`users/${b.uid}/menu`,f);if(await setDoc(e,v),v.shared){const e={category:l,name:c,description:u,totalWeight:p,sharedBy:g,ingredients:y.map(({name:e,weight:t,unit:n})=>({name:e,weight:t,unit:n}))},t=doc(db,"public_menu",f);await setDoc(t,e)}else{const e=doc(db,"public_menu",f);await deleteDoc(e)}alert("Блюдо с таким именем и категорией уже существует. Обновлено существующее блюдо.")}else{const e=doc(collection(db,`users/${b.uid}/menu`));if(await setDoc(e,v),v.shared){const t={category:l,name:c,description:u,totalWeight:p,sharedBy:g,ingredients:y.map(({name:e,weight:t,unit:n})=>({name:e,weight:t,unit:n}))},n=doc(db,"public_menu",e.id);await setDoc(n,t)}alert("Блюдо добавлено успешно!")}(!a||m.length>0)&&confirm("Были добавлены новые категории или ингредиенты. Выполнить синхронизацию коллекций сейчас?")&&await syncAllCollections(),t.reset(),loadAdminDashboard()}catch(e){console.error("Ошибка при сохранении блюда:",e),alert("Произошла ошибка при сохранении блюда. Пожалуйста, попробуйте снова.")}}async function deleteDish(){const e=document.getElementById("load-dish").value,t=auth.currentUser;if(!e)return void alert("Пожалуйста, выберите блюдо для удаления.");if(!t)return;if(confirm("Вы уверены, что хотите удалить это блюдо?"))try{const n=doc(db,`users/${t.uid}/menu`,e),o=doc(db,"public_menu",e);await deleteDoc(n),await deleteDoc(o),alert("Блюдо успешно удалено."),loadAdminDashboard()}catch(e){console.error("Ошибка при удалении блюда:",e),alert("Произошла ошибка при удалении блюда. Пожалуйста, попробуйте снова.")}}function handleEditClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),o=t.closest(".price-container").querySelector(".save-button"),a=t.closest(".price-container").querySelector(".cancel-button");n&&o&&a&&(n.setAttribute("data-original-value",n.value),n.disabled=!1,t.style.display="none",o.style.display="inline",a.style.display="inline")}function handleSaveClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),o=t.closest(".price-container").querySelector(".edit-button"),a=t.closest(".price-container").querySelector(".cancel-button");if(!n||!o||!a)return;const i=n.value,r=t.getAttribute("data-id");console.log("Сохранение новой цены:",{dishId:r,newPrice:i});const s=auth.currentUser;s?updateDoc(doc(db,`users/${s.uid}/menu`,r),{price:i}).then(()=>{console.log("Цена успешно обновлена:",{dishId:r,newPrice:i}),alert("Цена успешно обновлена"),n.disabled=!0,t.style.display="none",a.style.display="none",o.style.display="inline"}).catch(e=>{console.error("Ошибка при обновлении цены:",e),alert(`Ошибка при обновлении цены: ${e.message}`)}):alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.")}function handleCancelClick(e){const t=e.currentTarget,n=t.closest(".price-container").querySelector(".price-input"),o=t.closest(".price-container").querySelector(".edit-button"),a=t.closest(".price-container").querySelector(".save-button");if(!n||!o||!a)return;const i=n.getAttribute("data-original-value");console.log("Отмена редактирования цены, восстановление значения:",{originalValue:i}),n.value=i,n.disabled=!0,t.style.display="none",a.style.display="none",o.style.display="inline"}async function handleDeleteClick(e){const t=e.currentTarget.getAttribute("data-id"),n=auth.currentUser;if(!n)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");if(confirm("Вы уверены, что хотите удалить это блюдо?")){console.log("Удаление блюда:",{dishId:t});try{const e=doc(db,`users/${n.uid}/menu`,t),o=doc(db,"public_menu",t);await deleteDoc(e),await deleteDoc(o),alert("Блюдо успешно удалено."),showMenu()}catch(e){console.error("Ошибка при удалении блюда:",e),alert("Произошла ошибка при удалении блюда. Пожалуйста, попробуйте снова.")}}}async function addOrderToList(){const e=document.getElementById("order-select").value;if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован.");const n=collection(db,`users/${t.uid}/orders`),o=doc(n,e),a=await getDoc(o);if(!a.exists())return void alert("Заказ не найден.");const i=a.data(),r=document.getElementById("date-list"),s=i.orderDate.toDate().toISOString().split("T")[0];if(document.querySelector(`.calculation-order-date[data-date="${s}"]`))return void alert("Заказы на эту дату уже были добавлены.");const d=document.createElement("div");d.classList.add("calculation-order-date"),d.setAttribute("data-date",i.orderDate.toDate().toISOString().split("T")[0]),d.setAttribute("data-order-id",e),d.innerHTML=`\n            <p><strong>Дата заказа:</strong> ${i.orderDate.toDate().toISOString().split("T")[0]}</p>\n            <p><strong>Имя заказчика:</strong> ${i.customerName||"Не указано"}</p>\n            <p><strong>Телефон заказчика:</strong> ${i.customerPhone||"Не указано"}</p>\n            <button type="button" class="remove-date-button"><span class="material-icons-outlined">delete</span></button>\n        `,d.querySelector(".remove-date-button").addEventListener("click",()=>d.remove()),r.appendChild(d)}catch(e){console.error("Ошибка при добавлении заказа в список:",e),alert(`Ошибка при добавлении заказа: ${e.message}`)}else alert("Выберите заказ для добавления.")}async function calculatePurchases(){document.getElementById("ingredients-list").innerHTML="<h4>Необходимые ингредиенты и их вес:</h4>";const e=document.querySelectorAll(".calculation-order-date");if(0===e.length)return void alert("Добавьте хотя бы один заказ для расчета.");const t=new Map,n=document.getElementById("loading-indicator");n.style.display="flex";try{const o=auth.currentUser;if(!o)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");for(const n of e){const e=n.getAttribute("data-date"),a=n.getAttribute("data-order-id");console.log(`Загрузка заказа с ID: ${a} на дату: ${e}`);const i=collection(db,`users/${o.uid}/orders`),r=doc(i,a),s=await getDoc(r);if(!s.exists()){console.warn(`Заказ с ID ${a} не найден.`);continue}const d=s.data().menuItems;console.log(`Обработка заказа с ${d.length} элементами меню на дату ${e}`);for(const e of d)await getIngredientsForDish(o.uid,e.name,e.quantity,t)}displayIngredients(t)}catch(e){console.error("Ошибка при расчете закупок:",e),alert(`Ошибка при расчете закупок: ${e.message}`)}finally{n.style.display="none"}}async function getIngredientsForDish(e,t,n,o){console.log(`Загрузка ингредиентов для блюда: ${t}`);const a=collection(db,`users/${e}/menu`),i=await getDocs(query(a,where("name","==",t)));if(i.empty)return void console.warn(`Блюдо ${t} не найдено в меню.`);i.docs[0].data().ingredients.forEach(e=>{const t=e.name.replace(/\s+/g," ").trim().toLowerCase(),a=parseFloat(e.weight)*n,i=e.unit||"г",r=`${e.supplier||"Без поставщика"}|${t}|${i}`;if(o.has(r)){const e=o.get(r);o.set(r,e+a)}else o.set(r,a)})}function displayIngredients(e){const t=document.getElementById("ingredients-list");if(t.innerHTML="",0===e.size)return void(t.innerHTML+="<p>Ингредиенты не найдены.</p>");const n=new Map;e.forEach((e,t)=>{const[o,a,i]=t.split("|");n.has(o)||n.set(o,[]),n.get(o).push({ingredientName:a,totalWeight:e,unit:i})}),n.forEach((e,n)=>{const o=document.createElement("div");o.classList.add("supplier-group");const a=document.createElement("h4");a.textContent=`Поставщик: ${n}`,o.appendChild(a);const i=document.createElement("ul");e.forEach(({ingredientName:e,totalWeight:t,unit:n})=>{let o=t;"г"===n&&t>1e3?(o/=1e3,n="кг"):"мл"===n&&t>1e3&&(o/=1e3,n="л"),o=o%1==0?o:o.toFixed(2);const a=document.createElement("li");a.textContent=`${capitalizeFirstLetter(e)}: ${o} ${n}`,i.appendChild(a)}),o.appendChild(i),t.appendChild(o)})}function capitalizeFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}async function loadOrderByDate(){const e=document.getElementById("order-select").value;if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=doc(db,`users/${t.uid}/orders/${e}`),o=await getDoc(n);if(!o.exists())return void alert("Заказ не найден.");const a=o.data();currentOrderId=e,document.getElementById("order-date").value=a.orderDate.toDate().toISOString().split("T")[0],document.getElementById("order-customer-name").value=a.customerName||"",document.getElementById("order-customer-phone").value=a.customerPhone||"",document.getElementById("order-else-properties").value=a.additionalProperties||"";const i=document.getElementById("order-blank");i.innerHTML="";const r={};a.menuItems.forEach(e=>{const t=e.category||"Без категории";r[t]||(r[t]=[]),r[t].push(e)});for(const[e,t]of Object.entries(r)){let n=document.createElement("div");n.classList.add("category-container"),n.setAttribute("data-category",e);const o=document.createElement("h3");o.textContent=e,n.appendChild(o),t.forEach(e=>{const t=document.createElement("div");t.classList.add("dish-card"),t.innerHTML=`\n                    <p>${e.name}</p>\n                    <input type="number" value="${e.quantity}" min="1" class="dish-quantity" data-price="${e.price}">\n                    <span>${e.price} руб.</span>\n                    <span class="dish-total-price">${e.total} руб.</span>\n                    <button type="button" class="remove-button"><span class="material-icons-outlined">delete</span></button>\n                `,t.querySelector(".remove-button").addEventListener("click",()=>{n.removeChild(t),1===n.children.length&&i.removeChild(n),updateTotalSum()}),t.querySelector(".dish-quantity").addEventListener("input",()=>{updateDishTotalPrice(t),updateTotalSum()}),n.appendChild(t)}),i.appendChild(n),updateTotalSum()}const s=document.getElementById("additional-services");s.innerHTML="",a.additionalServices.forEach(e=>{const t=document.createElement("div");t.classList.add("service"),t.innerHTML=`\n                <input type="text" name="service-name" value="${e.name}" required>\n                <input type="number" name="service-quantity" value="${e.quantity}" min="1">\n                <input type="number" name="service-price" value="${e.price}" required>\n                <input type="number" name="service-total" value="${e.total}" readonly>\n                <button type="button" class="remove-service"><span class="material-icons-outlined">delete</span></button>\n            `,t.querySelector(".remove-service").addEventListener("click",()=>{t.remove(),updateFinalSum()}),t.querySelector('input[name="service-quantity"]').addEventListener("input",updateServiceTotal),t.querySelector('input[name="service-price"]').addEventListener("input",updateServiceTotal),s.appendChild(t)}),document.getElementById("total-sum").value=a.totalSum,document.getElementById("prepayment").value=a.prepayment,document.getElementById("final-sum").value=a.finalSum,updateTotalSum(),console.log(`${a.totalSum}`),updateFinalSum()}catch(e){console.error("Ошибка при загрузке заказа:",e),alert(`Ошибка при загрузке заказа: ${e.message}`)}else alert("Выберите заказ для загрузки.")}function addDishToOrder(){const e=document.getElementById("menu-items"),t=document.getElementById("order-blank"),n=e.value;if(!n)return void alert("Пожалуйста, выберите блюдо.");const o=JSON.parse(n),a=o.category?o.category:"Без категории";let i=document.querySelector(`.category-container[data-category="${a}"]`);if(!i){(i=document.createElement("div")).classList.add("category-container"),i.setAttribute("data-category",a);const e=document.createElement("h3");e.textContent=a,i.appendChild(e),t.appendChild(i)}const r=document.createElement("div");r.classList.add("order-item"),r.innerHTML=`\n        <div class="dish-card">\n            <p>${o.name}</p>\n            <input type="number" value="1" min="1" class="dish-quantity" data-price="${o.price}">\n            <span>${o.price} руб.</span>\n            <span class="dish-total-price">${o.price} руб.</span>\n            <button type="button" class="remove-button"><span class="material-icons-outlined">delete</span></button>\n        </div>\n    `,updateTotalSum(),r.querySelector(".remove-button").addEventListener("click",()=>{i.removeChild(r),1===i.children.length&&t.removeChild(i),updateTotalSum()}),r.querySelector(".dish-quantity").addEventListener("input",()=>{updateDishTotalPrice(r),updateTotalSum()}),i.appendChild(r),updateTotalSum()}function updateTotalSum(){const e=document.querySelectorAll(".order-item");let t=0;console.log(e),0===e.length&&(t=0),console.log(t),e.forEach(e=>{const n=((parseFloat(e.querySelector(".dish-quantity").value)||0)*(parseFloat(e.querySelector(".dish-quantity").getAttribute("data-price"))||0)).toFixed(2);e.querySelector(".dish-total-price").textContent=`${n} руб.`,t+=parseFloat(n)}),document.getElementById("total-sum").value=t.toFixed(2),updateFinalSum()}function updateDishTotalPrice(e){const t=((parseFloat(e.querySelector(".dish-quantity").value)||0)*(parseFloat(e.querySelector(".dish-quantity").getAttribute("data-price"))||0)).toFixed(2);e.querySelector(".dish-total-price").textContent=`${t} руб.`,updateTotalSum()}function addServiceField(){const e=document.getElementById("additional-services"),t=document.createElement("div");t.classList.add("service"),t.innerHTML='\n        <input type="text" name="service-name" placeholder="Название услуги" required>\n        <input type="number" name="service-quantity" placeholder="Количество" value="1" min="1">\n        <input type="number" name="service-price" placeholder="Цена" required>\n        <input type="number" name="service-total" placeholder="Итоговая сумма" readonly>\n        <button type="button" class="remove-service"><span class="material-icons-outlined">delete</span></button>\n    ',t.querySelector(".remove-service").addEventListener("click",()=>{t.remove(),updateFinalSum()}),t.querySelector('input[name="service-quantity"]').addEventListener("input",updateServiceTotal),t.querySelector('input[name="service-price"]').addEventListener("input",updateServiceTotal),e.appendChild(t)}function updateServiceTotal(e){const t=e.target.closest(".service"),n=((parseFloat(t.querySelector('input[name="service-quantity"]').value)||0)*(parseFloat(t.querySelector('input[name="service-price"]').value)||0)).toFixed(2);t.querySelector('input[name="service-total"]').value=n,updateFinalSum()}function updateFinalSum(){const e=parseFloat(document.getElementById("total-sum").value)||0,t=parseFloat(document.getElementById("prepayment").value)||0;let n=0;document.querySelectorAll(".service").forEach(e=>{n+=parseFloat(e.querySelector('input[name="service-total"]').value)||0});const o=(e+n-t).toFixed(2);document.getElementById("final-sum").value=o}function showPrintModal(){const e=generatePrintContent(),t=document.getElementById("print-modal");document.getElementById("print-content").innerHTML=e,t.classList.remove("hidden");document.querySelector(".modal-close-button").addEventListener("click",()=>{t.classList.add("hidden")});document.getElementById("confirm-print").addEventListener("click",()=>{printElement(e),t.classList.add("hidden")})}function printElement(e){const t=window.open("","","height=600,width=800");t.document.write(`\n        <html>\n            <head>\n                <title>Печать заказа</title>\n                <style>\n                    /* Стили для печати */\n                    body {\n                        font-family: Arial, sans-serif;\n                        margin: 20px;\n                    }\n                    h3, h4, h5 {\n                        margin: 0;\n                        padding: 5px 0;\n                    }\n                    ul {\n                        list-style-type: none;\n                        padding: 0;\n                    }\n                    li {\n                        padding: 5px 0;\n                    }\n                    p {\n                        margin: 10px 0;\n                    }\n                </style>\n            </head>\n            <body>\n                ${e}\n            </body>\n        </html>\n    `),t.document.close(),t.focus(),t.print(),t.close()}function generatePrintContent(){const e=document.getElementById("order-date").value,t=document.getElementById("order-customer-name").value,n=document.getElementById("order-customer-phone").value,o=document.getElementById("order-else-properties").value,a=parseFloat(document.getElementById("total-sum").value).toFixed(2),i=parseFloat(document.getElementById("prepayment").value).toFixed(2),r=parseFloat(document.getElementById("final-sum").value).toFixed(2);let s=`\n        <h3>Заказ на дату: ${e}</h3>\n        <h4>Заказчик: ${t} <> ${n}</h4>\n        <h5>Примечания: ${o}</h5>\n        <h4>Бланк заказа:</h4>\n    `;document.querySelectorAll(".category-container").forEach(e=>{const t=e.getAttribute("data-category");s+=`<h5>${t}</h5><ul>`;e.querySelectorAll(".order-item").forEach(e=>{const t=e.querySelector("p").textContent,n=e.querySelector(".dish-quantity").value,o=e.querySelector(".dish-total-price").textContent;s+=`<li>${t} &nbsp;&nbsp;&nbsp;&nbsp; ${n} шт. &nbsp;&nbsp;&nbsp;&nbsp; ${o}</li>`}),s+="</ul>"}),s+=`\n        </br>\n        <p>Итоговая сумма заказа: ${a} руб.</p>\n        </br>\n        <h4>Дополнительные услуги:</h4>\n        <ul>\n    `;return document.querySelectorAll(".service").forEach(e=>{const t=e.querySelector('input[name="service-name"]').value,n=e.querySelector('input[name="service-quantity"]').value,o=parseFloat(e.querySelector('input[name="service-total"]').value).toFixed(2)+" руб.";s+=`<li>${t} &nbsp;&nbsp;&nbsp;&nbsp; кол-во: ${n} &nbsp;&nbsp;&nbsp;&nbsp; ${o}</li>`}),s+=`\n        </ul>\n        </br></br>\n        <p>Внесенная предоплата: ${i} руб.</p>\n        <p>Итоговая сумма с учетом услуг и предоплаты: ${r} руб.</p>\n    `}async function saveOrder(){const e=new Date(document.getElementById("order-date").value),t=parseFloat(document.getElementById("total-sum").value)||0,n=parseFloat(document.getElementById("prepayment").value)||0,o=parseFloat(document.getElementById("final-sum").value)||0,a={orderDate:Timestamp.fromDate(e),customerName:document.getElementById("order-customer-name").value,customerPhone:document.getElementById("order-customer-phone").value,additionalProperties:document.getElementById("order-else-properties").value,menuItems:[],additionalServices:[],totalSum:t,prepayment:n,finalSum:o};document.querySelectorAll(".category-container").forEach(e=>{const t=e.getAttribute("data-category");e.querySelectorAll(".order-item").forEach(e=>{const n=e.querySelector("p").textContent,o=parseFloat(e.querySelector(".dish-quantity").value)||0,i=parseFloat(e.querySelector(".dish-quantity").getAttribute("data-price"))||0,r=parseFloat(e.querySelector(".dish-total-price").textContent)||0;a.menuItems.push({category:t,name:n,quantity:o,price:i,total:r})})}),document.querySelectorAll(".service").forEach(e=>{const t=e.querySelector('input[name="service-name"]').value,n=parseFloat(e.querySelector('input[name="service-quantity"]').value)||0,o=parseFloat(e.querySelector('input[name="service-price"]').value)||0,i=parseFloat(e.querySelector('input[name="service-total"]').value)||0;a.additionalServices.push({name:t,quantity:n,price:o,total:i})});try{const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const t=collection(db,`users/${e.uid}/orders`);currentOrderId?await updateDoc(doc(t,currentOrderId),a):await addDoc(t,a),alert("Заказ успешно сохранен.")}catch(e){console.error("Ошибка при сохранении заказа:",e),alert(`Ошибка при сохранении заказа: ${e.message}`)}loadOrders()}async function loadOrders(){try{const e=auth.currentUser;if(!e)return void alert("Пользователь не аутентифицирован.");const t=collection(db,`users/${e.uid}/orders`),n=new Date,o=new Date(n.setMonth(n.getMonth()-1)),a=Timestamp.fromDate(o),i=await getDocs(query(t,where("orderDate",">=",a))),r=document.getElementById("order-select");r.innerHTML='<option value="">Выберите заказ:</option>';const s={};i.forEach(e=>{const t=e.data(),n=t.orderDate.toDate().toISOString().split("T")[0];s[n]||(s[n]=[]),s[n].push({id:e.id,customerName:t.customerName,customerPhone:t.customerPhone})}),Object.keys(s).sort().forEach(e=>{const t=document.createElement("optgroup");t.label=e,s[e].forEach(e=>{const n=document.createElement("option");n.value=e.id,n.textContent=`${e.customerName} (${e.customerPhone})`,t.appendChild(n)}),r.appendChild(t)})}catch(e){console.error("Ошибка при загрузке заказов:",e),alert(`Ошибка при загрузке заказов: ${e.message}`)}}async function deleteOrder(){const e=document.getElementById("order-select").value;if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован.");const n=collection(db,`users/${t.uid}/orders`);await deleteDoc(doc(n,e)),alert("Заказ успешно удален."),loadOrders()}catch(e){console.error("Ошибка при удалении заказа:",e),alert(`Ошибка при удалении заказа: ${e.message}`)}else alert("Выберите заказ для удаления.")}function getFromLocalStorage(e){const t=localStorage.getItem(e);return t?JSON.parse(t):null}function setToLocalStorage(e,t){localStorage.setItem(e,JSON.stringify(t))}function removeDuplicates(e,t="name"){return e.filter((e,n,o)=>n===o.findIndex(n=>n[t]===e[t]))}async function syncCollectionFromFirestore(e){try{const t=getAuth().currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=t.uid;let o,a=`collection_${e}_${n}`;switch(e){case"suppliers":o=collection(db,`users/${n}/suppliers`);break;case"categories":o=collection(db,`users/${n}/categories`);break;case"services":o=collection(db,`users/${n}/services`);break;case"ingredients":o=collection(db,`users/${n}/ingredients`);break;default:return void console.error("Неверный тип коллекции.")}setToLocalStorage(a,removeDuplicates((await getDocs(o)).docs.map(t=>{const n=t.data();return"suppliers"===e?{id:t.id,name:n.name,phone:n.phone,address:n.address,createdAt:n.createdAt,updatedAt:n.updatedAt}:{id:t.id,name:n.name,createdAt:n.createdAt,updatedAt:n.updatedAt}}))),console.log(`Коллекция ${e} синхронизирована с Firestore и сохранена в localStorage`)}catch(t){console.error(`Ошибка при синхронизации ${e}:`,t)}}async function syncAllCollections(){await syncCollectionFromFirestore("suppliers"),await syncCollectionFromFirestore("categories"),await syncCollectionFromFirestore("services"),await syncCollectionFromFirestore("ingredients"),alert("Синхронизация всех коллекций завершена!")}async function showCollections(e){try{const t=getAuth().currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=t.uid;const o=getFromLocalStorage(`collection_${e}_${n}`);if(!o)return void alert(`Данные ${e} не найдены в localStorage. Пожалуйста, выполните синхронизацию.`);const a=document.getElementById("collection-content");let i;switch(e){case"suppliers":i="Список поставщиков";break;case"categories":i="Список категорий";break;case"services":i="Дополнительные услуги";break;case"ingredients":i="Ингредиенты"}a.innerHTML=`\n            <div class="${e}-list">\n                <h2>${i}</h2>\n                <ul id="${e}-ul">\n                    ${o.map(t=>`\n                        <li>\n                            <strong>${t.name||"Не указано"}</strong> <br>\n                            ${"suppliers"===e?`\n                                Телефон: ${t.phone||"Не указан"} <br>\n                                Адрес: ${t.address||"Не указан"} <br>\n                            `:""}\n                            <button data-id="${t.id}" class="edit-${e}-btn">\n                                <span class="material-icons-outlined">edit</span>\n                            </button>\n                            <button data-id="${t.id}" class="delete-${e}-btn">\n                                <span class="material-icons-outlined">delete</span>\n                            </button>\n                        </li>\n                    `).join("")}\n                </ul>\n                <button class="add-${e}-btn" onclick="showAddForm('${e}')">\n                    <span class="material-icons-outlined">add</span> Добавить элемент\n                </button>\n            </div>\n            `;document.querySelectorAll(`.edit-${e}-btn`).forEach(t=>t.addEventListener("click",t=>handleCollectionsEditClick(t,e)));document.querySelectorAll(`.delete-${e}-btn`).forEach(t=>t.addEventListener("click",t=>handleCollectionsDeleteClick(t,e)))}catch(t){console.error(`Ошибка при загрузке ${e}:`,t),alert(`Ошибка при загрузке ${e}: ${t.message}`)}}function showAddForm(e){const t=document.getElementById("collection-content"),n="suppliers"===e?'\n        <label for="suppliersPhone">Телефон:</label>\n        <input type="text" id="suppliersPhone" name="suppliersPhone" required>\n        \n        <label for="suppliersAddress">Адрес:</label>\n        <input type="text" id="suppliersAddress" name="suppliersAddress" required>\n    ':"",o={suppliers:"поставщики",categories:"категории",services:"дополнительные услуги",ingredients:"ингредиенты"}[e]||"Элемент";t.innerHTML=`\n        <div class="add-${e}-form-container">\n            <h2>Добавить элемент в коллекцию ${o}</h2>\n            <form id="add-${e}-form">\n                <label for="${e}Name">Название:</label>\n                <input type="text" id="${e}Name" name="${e}Name" required>\n\n                ${n}\n                \n                <button type="submit"><span class="material-icons-outlined">save</span> Сохранить</button>\n            </form>\n            <button class="back-button" onclick="showCollections('${e}')">Назад</button>\n        </div>\n    `;document.querySelector(".add-"+e+"-form-container").style.position="relative";document.getElementById(`add-${e}-form`).addEventListener("submit",t=>handleCollectionsAddItem(t,e))}async function handleCollectionsAddItem(e,t){e.preventDefault();const n=document.getElementById(`${t}Name`).value,o="suppliers"===t?document.getElementById("suppliersPhone").value:null,a="suppliers"===t?document.getElementById("suppliersAddress").value:null;if(n)try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const i=e.uid;let r,s=`collection_${t}_${i}`;switch(t){case"suppliers":r=collection(db,`users/${i}/suppliers`);break;case"categories":r=collection(db,`users/${i}/categories`);break;case"services":r=collection(db,`users/${i}/services`);break;case"ingredients":r=collection(db,`users/${i}/ingredients`)}const d={name:n,createdAt:new Date,updatedAt:new Date};"suppliers"===t&&(d.phone=o,d.address=a);const l=await addDoc(r,d),c=getFromLocalStorage(s)||[];c.push({id:l.id,...d}),setToLocalStorage(s,c),alert("Элемент успешно добавлен!"),showCollections(t)}catch(e){console.error(`Ошибка при добавлении элемента в ${t}:`,e),alert(`Ошибка при добавлении элемента в ${t}: ${e.message}`)}else alert("Пожалуйста, введите название.")}async function handleCollectionsDeleteClick(e,t){const n=e.target.closest("button").getAttribute("data-id");if(n){if(confirm("Вы уверены, что хотите удалить этот элемент?"))try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const o=e.uid;let a,i=`collection_${t}_${o}`;switch(t){case"suppliers":a=doc(db,`users/${o}/suppliers`,n);break;case"categories":a=doc(db,`users/${o}/categories`,n);break;case"services":a=doc(db,`users/${o}/services`,n);break;case"ingredients":a=doc(db,`users/${o}/ingredients`,n)}await deleteDoc(a);setToLocalStorage(i,(getFromLocalStorage(i)||[]).filter(e=>e.id!==n)),alert("Элемент успешно удален!"),showCollections(t)}catch(e){console.error(`Ошибка при удалении элемента из ${t}:`,e),alert(`Ошибка при удалении элемента из ${t}: ${e.message}`)}}else alert("ID элемента не найден.")}async function handleCollectionsEditClick(e,t){const n=e.currentTarget.getAttribute("data-id");try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const o=e.uid;let a;switch(t){case"suppliers":a=doc(db,`users/${o}/suppliers`,n);break;case"categories":a=doc(db,`users/${o}/categories`,n);break;case"services":a=doc(db,`users/${o}/services`,n)}const i=await getDoc(a);if(i.exists()){showEditForm(n,t,i.data())}else alert("Элемент не найден.")}catch(e){console.error(`Ошибка при загрузке данных элемента из ${t}:`,e),alert(`Ошибка при загрузке данных элемента из ${t}: ${e.message}`)}}function showEditForm(e,t,n){const o=document.getElementById("collection-content"),a="suppliers"===t?`\n        <label for="suppliersPhone">Телефон:</label>\n        <input type="text" id="suppliersPhone" name="suppliersPhone" value="${n.phone||""}" required>\n        \n        <label for="suppliersAddress">Адрес:</label>\n        <input type="text" id="suppliersAddress" name="suppliersAddress" value="${n.address||""}" required>\n    `:"",i={suppliers:"поставщик",categories:"категория",services:"дополнительная услуга",ingredients:"ингредиент"}[t]||"элемент";o.innerHTML=`\n        <div class="edit-${t}-form-container">\n            <h2>Редактировать ${i}</h2>\n            <form id="edit-${t}-form">\n                <label for="name">Название:</label>\n                <input type="text" id="name" name="name" value="${n.name||""}" required>\n                \n                ${a}\n                \n                <button type="submit"><span class="material-icons-outlined">save</span> Сохранить</button>\n            </form>\n            <button class="back-button" onclick="showCollections('${t}')">Назад</button>\n        </div>\n    `;document.getElementById(`edit-${t}-form`).addEventListener("submit",n=>handleCollectionsUpdateItem(n,t,e))}async function handleCollectionsUpdateItem(e,t,n){e.preventDefault();const o=document.getElementById("name").value,a="suppliers"===t?document.getElementById("suppliersPhone").value:null,i="suppliers"===t?document.getElementById("suppliersAddress").value:null;if(o)try{const e=getAuth().currentUser;if(!e)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const r=e.uid;let s,d=`collection_${t}_${r}`;switch(t){case"suppliers":s=doc(db,`users/${r}/suppliers`,n);break;case"categories":s=doc(db,`users/${r}/categories`,n);break;case"services":s=doc(db,`users/${r}/services`,n);break;case"ingredients":s=doc(db,`users/${r}/ingredients`,n)}const l={name:o,updatedAt:new Date};"suppliers"===t&&(l.phone=a,l.address=i),await updateDoc(s,l);const c=getFromLocalStorage(d)||[];c[c.findIndex(e=>e.id===n)]={id:n,...l},setToLocalStorage(d,c),alert("Элемент успешно обновлен!"),showCollections(t)}catch(e){console.error(`Ошибка при обновлении элемента в ${t}:`,e),alert(`Ошибка при обновлении элемента в ${t}: ${e.message}`)}else alert("Пожалуйста, введите название.")}function switchTab(e,t){document.querySelectorAll(".tab-button").forEach(e=>e.classList.remove("active-tab")),t.classList.add("active-tab"),showCollections(e)}import{logout}from"./auth.js";import{collection,addDoc,getDocs,getDoc,setDoc,updateDoc,deleteDoc,doc,query,where,Timestamp}from"firebase/firestore";import{getAuth}from"firebase/auth";import{initializeDragAndDrop,saveIconPositions,addIconEventListeners,auth,db}from"./main.js";const ADMIN_DASHBOARD_CONTENT_ID="admin-dashboard-content",ICON1_ID="icon1",ICON2_ID="icon2",ICON3_ID="icon3",ICON4_ID="icon4",ICON5_ID="icon5";export function loadAdminDashboard(){console.log("Loading admin dashboard...");const e=document.getElementById("admin-dashboard-container"),t=document.getElementById("admin-dashboard-content");e&&t?(t.style.display="none",e.style.display="block",e.innerHTML=`\n            <h2>Рабочий стол</h2>\n            <button class="logout" onclick="logout()"><span class="material-icons-outlined">close</span></button>\n            <div class="icon-container" id="${ICON1_ID}" draggable="true">\n                <img src="./images/icons/add_dish_icon.svg" alt="Добавить блюдо">\n                <p>Добавить блюдо</p>\n            </div>\n            <div class="icon-container" id="${ICON2_ID}" draggable="true">\n                <img src="./images/icons/view_menu_icon.svg" alt="Просмотр меню">\n                <p>Просмотр меню</p>\n            </div>\n            <div class="icon-container" id="${ICON3_ID}" draggable="true">\n                <img src="./images/icons/calculate_purchases_icon.svg" alt="Подсчет закупок">\n                <p>Подсчет закупок</p>\n            </div>\n            <div class="icon-container" id="${ICON4_ID}" draggable="true">\n                <img src="./images/icons/order_icon.svg" alt="Оформление заказа">\n                <p>Оформление заказа</p>\n            </div>\n            <div class="icon-container" id="${ICON5_ID}" draggable="true">\n                <img src="./images/icons/contact_icon.svg" alt="Коллекции элементов">\n                <p>Коллекции элементов</p>\n            </div>\n        `,addIconEventListeners(),initializeDragAndDrop(),function(){const e=JSON.parse(localStorage.getItem("iconPositions"));if(e){const t=document.getElementById("admin-dashboard-container");e.forEach(e=>{const n=document.getElementById(e.id);if(n){const o=parseFloat(e.left)*(t.offsetWidth/window.innerWidth),a=parseFloat(e.top)*(t.offsetHeight/window.innerHeight);n.style.left=`${o}px`,n.style.top=`${a}px`}})}}(),window.addEventListener("beforeunload",saveIconPositions)):console.error("Ошибка: не удалось найти admin-dashboard-container или admin-dashboard-content.")};window.loadAdminDashboard=loadAdminDashboard,window.showDishForm=async function(){function e(e){console.log(`Загрузка данных из localStorage по ключу: ${e}`);const t=localStorage.getItem(e);if(!t)return console.log("Данные не найдены в localStorage"),[];const n=JSON.parse(t).map(e=>e.name);return console.log("Загруженные данные:",n),n}showAdminContent();const t=document.getElementById("admin-dashboard-content");if(!t)return void console.error('Элемент с ID "admin-dashboard-content" не найден.');const n=await loadSupplierOptions();t.innerHTML=`\n    <div class="add-dish-container">\n        <h3 class="page-title">Добавить блюдо</h3>\n        <form id="dish-form">\n            <input type="text" id="category-name" name="category-name" placeholder="Название категории" required>\n            <input type="text" id="dish-name" name="dish-name" placeholder="Название блюда" required>\n            <div id="ingredients-container">\n                <h4 class="ingredients-label">Ингредиенты</h4>\n                <div class="ingredient-group">\n                    <input type="text" id="ingredient-name" name="ingredient-name" placeholder="Название ингредиента" required>\n                    <input type="number" name="ingredient-weight" placeholder="Вес" class="weight-input" required>\n                    <select name="ingredient-unit">\n                        <option value="г">г</option>\n                        <option value="мл">мл</option>\n                        <option value="шт">шт</option>\n                    </select>\n                    <select name="ingredient-supplier" required>\n                        <option value="">Выберите поставщика</option>\n                        ${n}\n                    </select>\n                    <button type="button" class="remove-ingredient-button"><span class="material-icons-outlined">delete</span></button>\n                </div>\n            </div>\n            <button type="button" id="add-ingredient" class="add-ingredient-button">Добавить ингредиент</button>\n            <textarea id="dish-description" name="dish-description" placeholder="Описание приготовления, процесс и время" required></textarea>\n            <input type="number" id="dish-total-weight" name="dish-total-weight" placeholder="Общий вес на порцию (г)" required>\n            <input type="number" id="dish-price" name="dish-price" step="0.01" placeholder="Цена за порцию" required>\n            <div>\n                <input type="checkbox" id="shared" name="shared">\n                <label for="shared">Предоставить доступ</label>\n            </div>\n            <div id="shared-by-container" style="display: none;">\n                <input type="text" id="shared-by" name="shared-by" placeholder="Кто предоставил доступ">\n            </div>\n            <button type="submit" id="save-dish-button" class="submit-button">Добавить блюдо</button>\n        </form>\n        <button class="back-button" onclick="loadAdminDashboard()"><span class="material-icons-outlined">arrow_back</span></button>\n        <div class="edit-dish-container">\n            <h4>Редактировать существующее блюдо</h4>\n            <form id="load-dish-form">\n                <label for="load-dish">Выберите блюдо для редактирования:</label>\n                <select id="load-dish" name="load-dish">\n                    <option value="">Выберите блюдо</option>\n                </select>\n                <button type="button" id="load-dish-button">Загрузить блюдо</button>\n                <button type="button" id="delete-dish-button">Удалить блюдо</button>\n            </form>\n        </div>\n    </div>\n    `,await loadDishOptions(),addEventListeners();document.getElementById("dish-form").addEventListener("submit",handleSubmit),$(document).ready(function(){const t=getAuth().currentUser.uid,n=e(`collection_categories_${t}`);$("#category-name").autocomplete({source:n});const o=e(`collection_ingredients_${t}`);$("#ingredient-name").autocomplete({source:o})})},document.addEventListener("DOMContentLoaded",()=>{addEventListeners()}),window.showMenu=async function(){showAdminContent();document.getElementById("admin-dashboard-content").innerHTML='\n        <div class="show-menu-container">\n\n            <h3 class="page-title">Меню</h3>\n            <div id="loading-indicator" style="display: none;">\n                <p>Загрузка, пожалуйста подождите...</p>\n                <div class="spinner"></div>\n            </div>\n            <div id="menu-list"></div>\n            \n            <button class="back-button" onclick="loadAdminDashboard()"><span class="material-icons-outlined">arrow_back</span></button>\n        </div>\n    ';const e=document.getElementById("loading-indicator"),t=document.getElementById("menu-list");e.style.display="flex";try{const n=getAuth().currentUser;if(n){const e=n.uid,o=collection(db,`users/${e}/menu`),a=await getDocs(o);if(t.innerHTML="",a.empty)return void(t.innerHTML='\n                    <p>Ваше меню пока пусто. <a href="#" onclick="showDishForm()">Добавьте первое блюдо!</a></p>\n                ');const i={};a.forEach(e=>{const t=e.data(),n=t.category?t.category:"Без категории";i[n]||(i[n]=[]),i[n].push({id:e.id,...t}),console.log("Получено блюдо с сервера:",{id:e.id,...t})});for(const e in i){const n=document.createElement("div");n.classList.add("category"),n.innerHTML=`<h4>Категория: ${e}</h4>`,t.appendChild(n);const o=document.createElement("div");o.classList.add("dish-container"),n.appendChild(o),i[e].forEach(e=>{const t=Array.isArray(e.ingredients)&&e.ingredients.length>0?e.ingredients.map(e=>e.name).join(", "):"Нет ингредиентов",n=document.createElement("div");n.classList.add("dish-card"),n.innerHTML=`\n                    <h5>${e.name}</h5>\n                    <p class="ingredients"> ${t}</p>\n                    <p>Вес: ${e.totalWeight?e.totalWeight:"Не указано"} гр</p>\n                    <div class="price-container">\n                        <input type="number" value="${e.price}" class="price-input" data-id="${e.id}" data-original-value="${e.price}" disabled> руб.\n                        <button class="edit-button" aria-label="Редактировать"><span class="material-icons-outlined">edit</span></button>\n                        <button class="save-button" data-id="${e.id}" style="display:none" aria-label="Сохранить"><span class="material-icons-outlined">save</span></button>\n                        <button class="cancel-button" style="display:none" aria-label="Отменить"><span class="material-icons-outlined">close</span></button>\n                    </div>\n                    <button class="delete-button" data-id="${e.id}" aria-label="Удалить"><span class="material-icons-outlined">delete</span></button>\n                `;const a=n.querySelector(".ingredients");a.setAttribute("title",a.textContent.trim()),o.appendChild(n)})}document.querySelectorAll(".edit-button").forEach(e=>{e.addEventListener("click",handleEditClick)}),document.querySelectorAll(".save-button").forEach(e=>{e.addEventListener("click",handleSaveClick)}),document.querySelectorAll(".cancel-button").forEach(e=>{e.addEventListener("click",handleCancelClick)}),document.querySelectorAll(".delete-button").forEach(e=>{e.addEventListener("click",handleDeleteClick)})}else console.error("Пользователь не аутентифицирован"),alert("Пожалуйста, войдите в систему, чтобы просмотреть меню.")}catch(e){console.error("Ошибка при загрузке меню:",e),alert(`Ошибка при загрузке меню: ${e.message}`)}finally{e.style.display="none"}},window.showPurchaseCalculationForm=function(){showAdminContent();document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="calculation-form-container">\n        <h3 class="page-title">Подсчет закупок</h3>\n        <div id="loading-indicator" style="display: none;">\n            <p>Загрузка, пожалуйста подождите...</p>\n            <div class="spinner"></div>\n        </div>\n        <form id="purchase-calculation-form">\n            <label for="order-select">Выберите заказ:</label>\n            <select id="order-select" name="order-select">\n                <option value="">Выберите заказ:</option>\n                \x3c!-- Динамически добавляемые опции --\x3e\n            </select>\n            <button type="button" id="load-order-button">Загрузить заказ</button>\n            <div id="date-list"></div>\n            <button type="button" id="calculate-purchases-button">Рассчитать</button>\n            <button type="button" class="back-button" onclick="loadAdminDashboard()"><span class="material-icons-outlined">arrow_back</span></button>\n        </form>\n        <div id="ingredients-list">\n            \x3c!-- Здесь будет отображен список ингредиентов и их вес --\x3e\n        </div>\n    </div>\n    ',document.getElementById("load-order-button").addEventListener("click",addOrderToList),document.getElementById("calculate-purchases-button").addEventListener("click",calculatePurchases),loadOrders()},window.showOrderForm=function(){showAdminContent(),loadOrders();document.getElementById("admin-dashboard-content").innerHTML='\n    <div class="show-order-container">\n        <h3>Загрузка заказа по дате</h3>\n        <div class="order-select-container">\n            <label for="order-select">Выберите заказ для редактирования:</label>\n            <select id="order-select" name="order-select">\n                <option value="">Выберите заказ:</option>\n                \x3c!-- Динамически добавляемые опции --\x3e\n            </select>\n            <button type="button" id="load-order-button"><span class="material-icons-outlined">upload</span></button>\n            <button type="button" id="delete-order-button"><span class="material-icons-outlined">delete</span></button>\n        </div>\n\n        <h3 class="page-title">Оформление заказа</h3>\n        <form id="order-form">\n            <div class="order-properties-container">\n                <div class="property">\n                    <label for="order-date">Дата заказа:</label>\n                    <input type="date" id="order-date" name="order-date" required="">\n                </div>\n\n                <div class="property">\n                    <label for="order-customer-name">Имя заказчика:</label>\n                    <input type="text" id="order-customer-name" name="order-customer-name" required="">\n                </div>\n\n                <div class="property">\n                    <label for="order-customer-phone">Телефон заказчика:</label>\n                    <input type="tel" id="order-customer-phone" name="order-customer-phone" required="">\n                </div>\n\n                <div class="property">\n                    <label for="order-else-properties">Дополнительные данные:</label>\n                    <textarea name="order-else-properties" id="order-else-properties" cols="30" rows="5"></textarea>\n                </div>\n            </div>\n\n            <h4>Бланк заказа</h4>\n            <div id="order-blank">\n                \x3c!-- Здесь будут добавляться выбранные блюда --\x3e\n            </div>\n\n            <div class="container">\n                <label for="total-sum">Итоговая сумма заказа:</label>\n                <input type="number" id="total-sum" name="total-sum" readonly><span>&nbsp;руб.</span>\n            </div>\n\n            <label for="menu-items">Выберите блюдо:</label>\n            <select id="menu-items" name="menu-items">\n                <option value="">Выберите блюдо</option>\n            </select>\n            <button type="button" id="add-dish-to-order">Добавить блюдо</button>\n\n            <h4>Дополнительные услуги</h4>\n            <div id="additional-services">\n                \x3c!-- Здесь будут добавляться дополнительные услуги --\x3e\n            </div>\n            <button type="button" id="add-service">Добавить услугу</button>\n\n            <div class="container">\n                <label for="prepayment">Внесенная предоплата:</label>\n                <input type="number" id="prepayment" name="prepayment"><span>&nbsp;руб.</span>\n            </div>\n\n            <div class="container">\n                <label for="final-sum">Сумма доплаты:</label>\n                <input type="number" id="final-sum" name="final-sum" readonly><span>&nbsp;руб.</span>\n            </div>\n\n            <button type="button" id="print-order">Распечатать заказ</button>\n            <button type="button" id="save-order">Сохранить заказ</button>\n            <button type="button" class="back-button" onclick="loadAdminDashboard()"><span class="material-icons-outlined">arrow_back</span></button>\n        </form>\n\n        <div id="print-modal" class="modal hidden">\n            <div class="modal-content">\n                <span class="modal-close-button">&times;</span>\n                <div id="print-content"></div>\n                <button type="button" id="confirm-print">Печать</button>\n            </div>\n        </div>\n    </div>\n    ',loadMenuItems(),document.getElementById("add-dish-to-order").addEventListener("click",addDishToOrder),document.getElementById("add-service").addEventListener("click",addServiceField),document.getElementById("prepayment").addEventListener("input",updateFinalSum),document.getElementById("print-order").addEventListener("click",showPrintModal),document.getElementById("save-order").addEventListener("click",saveOrder),document.getElementById("load-order-button").addEventListener("click",loadOrderByDate),document.getElementById("delete-order-button").addEventListener("click",deleteOrder)};let currentOrderId=null;window.loadMenuItems=async function(){const e=document.getElementById("menu-items");if(e)try{const t=auth.currentUser;if(!t)return void alert("Пользователь не аутентифицирован. Пожалуйста, выполните вход.");const n=collection(db,`users/${t.uid}/menu`),o=await getDocs(n);e.innerHTML="";const a=document.createElement("option");a.value="",a.textContent="Выберите блюдо",a.disabled=!0,a.selected=!0,e.appendChild(a);const i={};o.forEach(e=>{const t=e.data(),n=t.category||"Без категории";i[n]||(i[n]=[]),i[n].push({id:e.id,name:t.name,price:t.price})});for(const[t,n]of Object.entries(i))if(n.length>0){const o=document.createElement("optgroup");o.label=t,n.forEach(e=>{const n=document.createElement("option");n.value=JSON.stringify({id:e.id,name:e.name,price:e.price,category:t}),n.textContent=e.name,o.appendChild(n)}),e.appendChild(o)}}catch(e){console.error("Ошибка при получении блюд:",e),alert(`Ошибка при получении блюд: ${e.message}`)}else console.error('Элемент с ID "menu-items" не найден.')},window.loadOrders=loadOrders;export async function showCollectionButtons(){showAdminContent();document.getElementById("admin-dashboard-content").innerHTML='\n        <button id="update-collections-btn" class="update-btn">\n            <span class="material-symbols-outlined">sync</span>\n        </button>\n        <div id="collection-tabs">\n            <button id="show-suppliers-btn" class="tab-button active-tab">Поставщики</button>\n            <button id="show-categories-btn" class="tab-button">Категории</button>\n            <button id="show-services-btn" class="tab-button">Дополнительные услуги</button>\n            <button id="show-ingredients-btn" class="tab-button">Ингредиенты</button>\n        </div>\n        <div id="collection-content">\n            \x3c!-- Здесь будут отображаться элементы коллекций --\x3e\n        </div>\n        <button type="button" class="back-button" onclick="loadAdminDashboard()">\n            <span class="material-icons-outlined">arrow_back</span>\n        </button>\n    ',document.getElementById("update-collections-btn").addEventListener("click",async()=>{syncAllCollections()});const e=document.getElementById("show-suppliers-btn"),t=document.getElementById("show-categories-btn"),n=document.getElementById("show-services-btn"),o=document.getElementById("show-ingredients-btn");e.addEventListener("click",()=>switchTab("suppliers",e)),t.addEventListener("click",()=>switchTab("categories",t)),n.addEventListener("click",()=>switchTab("services",n)),o.addEventListener("click",()=>switchTab("ingredients",o)),showCollections("suppliers")};window.showCollectionButtons=showCollectionButtons,window.showAddForm=showAddForm,window.showCollections=showCollections;